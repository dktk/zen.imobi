<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNet.Mvc.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.AspNet.Mvc.AcceptVerbsAttribute">
            <summary>
            Specifies what HTTP methods an action supports.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.AcceptVerbsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.AcceptVerbsAttribute" /> class.
            </summary>
            <param name="method">The HTTP method the action supports.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.AcceptVerbsAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.AcceptVerbsAttribute" /> class.
            </summary>
            <param name="methods">The HTTP methods the action supports.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.AcceptVerbsAttribute.HttpMethods">
            <summary>
            Gets the HTTP methods the action supports.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.AcceptVerbsAttribute.Route">
            <summary>
            The route template. May be null.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.AcceptVerbsAttribute.Microsoft#AspNet#Mvc#Routing#IRouteTemplateProvider#Template">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.AcceptVerbsAttribute.Order">
            <summary>
            Gets the route order. The order determines the order of route execution. Routes with a lower
            order value are tried first. When a route doesn't specify a value, it gets the value of the
            <see cref="P:Microsoft.AspNet.Mvc.RouteAttribute.Order"/> or a default value of 0 if the <see cref="T:Microsoft.AspNet.Mvc.RouteAttribute"/>
            doesn't define a value on the controller.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.AcceptVerbsAttribute.Microsoft#AspNet#Mvc#Routing#IRouteTemplateProvider#Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.AcceptVerbsAttribute.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionContext.InputFormatters">
            <summary>
            Input formatters associated with this context. 
            The formatters are populated only after IInputFormattersProvider runs.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionContext.Controller">
            <summary>
            The controller is available only after the controller factory runs.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionDescriptor.ActionConstraints">
            <summary>
            The set of constraints for this action. Must all be satisfied for the action to be selected.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionDescriptor.DisplayName">
            <summary>
            A friendly name for this action.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionDescriptor.Properties">
            <summary>
            Stores arbitrary metadata properties associated with the <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptor"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ActionDescriptorExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ActionDescriptorExtensions.GetProperty``1(Microsoft.AspNet.Mvc.ActionDescriptor)">
            <summary>
            Gets the value of a property from the <see cref="P:Microsoft.AspNet.Mvc.ActionDescriptor.Properties"/> collection 
            using the provided value of <typeparamref name="T"/> as the key.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="actionDescriptor">The action descriptor.</param>
            <returns>The property or the default value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ActionDescriptorExtensions.SetProperty``1(Microsoft.AspNet.Mvc.ActionDescriptor,``0)">
            <summary>
            Sets the value of an property in the <see cref="P:Microsoft.AspNet.Mvc.ActionDescriptor.Properties"/> collection using
            the provided value of <typeparamref name="T"/> as the key.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="actionDescriptor">The action descriptor.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ActionDescriptorsCollection">
            <summary>
            A cached collection of <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptor" />.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ActionDescriptorsCollection.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.AspNet.Mvc.ActionDescriptor},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptorsCollection"/>.
            </summary>
            <param name="items">The result of action discovery</param>
            <param name="version">The unique version of discovered actions.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionDescriptorsCollection.Items">
            <summary>
            Returns the cached <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionDescriptorsCollection.Version">
            <summary>
            Returns the unique version of the currently cached items.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ActivateAttribute">
            <summary>
            Specifies that a property or parameter value should be initialized via the dependency injection
            container for activated types.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.AmbiguousActionException">
            <summary>
            An exception which indicates multiple matches in action selection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.View">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.ViewResult"/> object that renders a view to the response.
            </summary>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.ViewResult"/> object for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.View(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.ViewResult"/> object by specifying a <paramref name="viewName"/>.
            </summary>
            <param name="viewName">The name of the view that is rendered to the response.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.ViewResult"/> object for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.View(System.Object)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.ViewResult"/> object by specifying a <paramref name="model"/>
            to be rendered by the view.
            </summary>
            <param name="model">The model that is rendered by the view.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.ViewResult"/> object for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.View(System.String,System.Object)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.ViewResult"/> object by specifying a <paramref name="viewName"/>
            and the <paramref name="model"/> to be rendered by the view.
            </summary>
            <param name="viewName">The name of the view that is rendered to the response.</param>
            <param name="model">The model that is rendered by the view.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.ViewResult"/> object for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.PartialView">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.PartialViewResult"/> object that renders a partial view to the response.
            </summary>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.PartialViewResult"/> object for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.PartialView(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.PartialViewResult"/> object by specifying a <paramref name="viewName"/>.
            </summary>
            <param name="viewName">The name of the view that is rendered to the response.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.PartialViewResult"/> object for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.PartialView(System.Object)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.PartialViewResult"/> object by specifying a <paramref name="model"/>
            to be rendered by the partial view.
            </summary>
            <param name="model">The model that is rendered by the partial view.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.PartialViewResult"/> object for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.PartialView(System.String,System.Object)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.PartialViewResult"/> object by specifying a <paramref name="viewName"/>
            and the <paramref name="model"/> to be rendered by the partial view.
            </summary>
            <param name="viewName">The name of the partial view that is rendered to the response.</param>
            <param name="model">The model that is rendered by the partial view.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.PartialViewResult"/> object for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.Content(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.ContentResult"/> object by specifying a <paramref name="content"/> string.
            </summary>
            <param name="content">The content to write to the response.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.ContentResult"/> object for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.Content(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.ContentResult"/> object by specifying a <paramref name="content"/> string
            and a content type.
            </summary>
            <param name="content">The content to write to the response.</param>
            <param name="contentType">The content type (MIME type).</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.ContentResult"/> object for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.Content(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.ContentResult"/> object by specifying a <paramref name="content"/> string,
            a <paramref name="contentType"/>, and <paramref name="contentEncoding"/>.
            </summary>
            <param name="content">The content to write to the response.</param>
            <param name="contentType">The content type (MIME type).</param>
            <param name="contentEncoding">The content encoding.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.ContentResult"/> object for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.Json(System.Object)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.JsonResult"/> object that serializes the specified <paramref name="data"/> object
            to JSON.
            </summary>
            <param name="data">The object to serialize.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.JsonResult"/> that serializes the specified <paramref name="data"/>
            to JSON format for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.Redirect(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.RedirectResult"/> object that redirects to the specified <paramref name="url"/>.
            </summary>
            <param name="url">The URL to redirect to.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectPermanent(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNet.Mvc.RedirectResult"/> object with <see cref="P:Microsoft.AspNet.Mvc.RedirectResult.Permanent"/> set to true
            using the specified <paramref name="url"/>.
            </summary>
            <param name="url">The URL to redirect to.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToAction(System.String)">
            <summary>
            Redirects to the specified action using the <paramref name="actionName"/>.
            </summary>
            <param name="actionName">The name of the action.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToActionResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToAction(System.String,System.Object)">
            <summary>
            Redirects to the specified action using the <paramref name="actionName"/>
            and <paramref name="routeValues"/>.
            </summary>
            <param name="actionName">The name of the action.</param>
            <param name="routeValues">The parameters for a route.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToActionResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToAction(System.String,System.String)">
            <summary>
            Redirects to the specified action using the <paramref name="actionName"/>
            and the <paramref name="controllerName"/>.
            </summary>
            <param name="actionName">The name of the action.</param>
            <param name="controllerName">The name of the controller.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToActionResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToAction(System.String,System.String,System.Object)">
            <summary>
            Redirects to the specified action using the specified <paramref name="actionName"/>,
            <paramref name="controllerName"/>, and <paramref name="routeValues"/>.
            </summary>
            <param name="actionName">The name of the action.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">The parameters for a route.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToActionResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToActionPermanent(System.String)">
            <summary>
            Redirects to the specified action with <see cref="P:Microsoft.AspNet.Mvc.RedirectToActionResult.Permanent"/> set to true
            using the specified <paramref name="actionName"/>.
            </summary>
            <param name="actionName">The name of the action.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToActionResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToActionPermanent(System.String,System.Object)">
            <summary>
            Redirects to the specified action with <see cref="P:Microsoft.AspNet.Mvc.RedirectToActionResult.Permanent"/> set to true
            using the specified <paramref name="actionName"/> and <paramref name="routeValues"/>.
            </summary>
            <param name="actionName">The name of the action.</param>
            <param name="routeValues">The parameters for a route.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToActionResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToActionPermanent(System.String,System.String)">
            <summary>
            Redirects to the specified action with <see cref="P:Microsoft.AspNet.Mvc.RedirectToActionResult.Permanent"/> set to true
            using the specified <paramref name="actionName"/> and <paramref name="controllerName"/>.
            </summary>
            <param name="actionName">The name of the action.</param>
            <param name="controllerName">The name of the controller.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToActionResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToActionPermanent(System.String,System.String,System.Object)">
            <summary>
            Redirects to the specified action with <see cref="P:Microsoft.AspNet.Mvc.RedirectToActionResult.Permanent"/> set to true
            using the specified <paramref name="actionName"/>, <paramref name="controllerName"/>,
            and <paramref name="routeValues"/>.
            </summary>
            <param name="actionName">The name of the action.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">The parameters for a route.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToActionResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToRoute(System.String)">
            <summary>
            Redirects to the specified route using the specified <paramref name="routeName"/>.
            </summary>
            <param name="routeName">The name of the route.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToRouteResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToRoute(System.Object)">
            <summary>
            Redirects to the specified route using the specified <paramref name="routeValues"/>.
            </summary>
            <param name="routeValues">The parameters for a route.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToRouteResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToRoute(System.String,System.Object)">
            <summary>
            Redirects to the specified route using the specified <paramref name="routeName"/>
            and <paramref name="routeValues"/>.
            </summary>
            <param name="routeName">The name of the route.</param>
            <param name="routeValues">The parameters for a route.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToRouteResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToRoutePermanent(System.String)">
            <summary>
            Redirects to the specified route with <see cref="P:Microsoft.AspNet.Mvc.RedirectToRouteResult.Permanent"/> set to true
            using the specified <paramref name="routeName"/>.
            </summary>
            <param name="routeName">The name of the route.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToRouteResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToRoutePermanent(System.Object)">
            <summary>
            Redirects to the specified route with <see cref="P:Microsoft.AspNet.Mvc.RedirectToRouteResult.Permanent"/> set to true
            using the specified <paramref name="routeValues"/>.
            </summary>
            <param name="routeValues">The parameters for a route.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToRouteResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.RedirectToRoutePermanent(System.String,System.Object)">
            <summary>
            Redirects to the specified route with <see cref="P:Microsoft.AspNet.Mvc.RedirectToRouteResult.Permanent"/> set to true
            using the specified <paramref name="routeName"/> and <paramref name="routeValues"/>.
            </summary>
            <param name="routeName">The name of the route.</param>
            <param name="routeValues">The parameters for a route.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.RedirectToRouteResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.File(System.Byte[],System.String)">
            <summary>
            Returns a file with the specified <paramref name="fileContents" /> as content and the
            specified <paramref name="contentType" /> as the Content-Type.
            </summary>
            <param name="fileContents">The file contents.</param>
            <param name="contentType">The Content-Type of the file.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.FileContentResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.File(System.Byte[],System.String,System.String)">
            <summary>
            Returns a file with the specified <paramref name="fileContents" /> as content, the
            specified <paramref name="contentType" /> as the Content-Type and the
            specified <paramref name="fileDownloadName" /> as the suggested file name.
            </summary>
            <param name="fileContents">The file contents.</param>
            <param name="contentType">The Content-Type of the file.</param>
            <param name="fileDownloadName">The suggested file name.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.FileContentResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.File(System.IO.Stream,System.String)">
            <summary>
            Returns a file in the specified <paramref name="fileStream" /> with the
            specified <paramref name="contentType" /> as the Content-Type.
            </summary>
            <param name="fileStream">The <see cref="T:System.IO.Stream"/> with the contents of the file.</param>
            <param name="contentType">The Content-Type of the file.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.FileStreamResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.File(System.IO.Stream,System.String,System.String)">
            <summary>
            Returns a file in the specified <paramref name="fileStream" /> with the
            specified <paramref name="contentType" /> as the Content-Type and the
            specified <paramref name="fileDownloadName" /> as the suggested file name.
            </summary>
            <param name="fileStream">The <see cref="T:System.IO.Stream"/> with the contents of the file.</param>
            <param name="contentType">The Content-Type of the file.</param>
            <param name="fileDownloadName">The suggested file name.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.FileStreamResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.File(System.String,System.String)">
            <summary>
            Returns the file specified by <paramref name="fileName" /> with the
            specified <paramref name="contentType" /> as the Content-Type.
            </summary>
            <param name="fileName">The <see cref="T:System.IO.Stream"/> with the contents of the file.</param>
            <param name="contentType">The Content-Type of the file.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.FilePathResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.File(System.String,System.String,System.String)">
            <summary>
            Returns the file specified by <paramref name="fileName" /> with the
            specified <paramref name="contentType" /> as the Content-Type and the
            specified <paramref name="fileDownloadName" /> as the suggested file name.
            </summary>
            <param name="fileName">The <see cref="T:System.IO.Stream"/> with the contents of the file.</param>
            <param name="contentType">The Content-Type of the file.</param>
            <param name="fileDownloadName">The suggested file name.</param>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.FilePathResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.HttpNotFound">
            <summary>
            Creates an <see cref="T:Microsoft.AspNet.Mvc.HttpNotFoundResult"/> that produces a Not Found (404) response.
            </summary>
            <returns>The created <see cref="T:Microsoft.AspNet.Mvc.HttpNotFoundResult"/> for the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.OnActionExecuting(Microsoft.AspNet.Mvc.ActionExecutingContext)">
            <summary>
            Called before the action method is invoked.
            </summary>
            <param name="context">The action executing context.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.OnActionExecuted(Microsoft.AspNet.Mvc.ActionExecutedContext)">
            <summary>
            Called after the action method is invoked.
            </summary>
            <param name="context">The action executed context.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.OnActionExecutionAsync(Microsoft.AspNet.Mvc.ActionExecutingContext,Microsoft.AspNet.Mvc.ActionExecutionDelegate)">
            <summary>
            Called before the action method is invoked.
            </summary>
            <param name="context">The action executing context.</param>
            <param name="next">The <see cref="T:Microsoft.AspNet.Mvc.ActionExecutionDelegate"/> to execute. Invoke this delegate in the body
            of <see cref="M:Microsoft.AspNet.Mvc.Controller.OnActionExecutionAsync(Microsoft.AspNet.Mvc.ActionExecutingContext,Microsoft.AspNet.Mvc.ActionExecutionDelegate)" /> to continue execution of the action.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.TryUpdateModelAsync``1(``0)">
            <summary>
            Updates the specified model instance using values from the controller's current value provider.
            </summary>
            <typeparam name="TModel">The type of the model object.</typeparam>
            <param name="model">The model instance to update.</param>
            <returns>true if the update is successful; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.TryUpdateModelAsync``1(``0,System.String)">
            <summary>
            Updates the specified model instance using values from the controller's current value provider
            and a prefix.
            </summary>
            <typeparam name="TModel">The type of the model object.</typeparam>
            <param name="model">The model instance to update.</param>
            <param name="prefix">The prefix to use when looking up values in the value provider.</param>
            <returns>true if the update is successful; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Controller.TryUpdateModelAsync``1(``0,System.String,Microsoft.AspNet.Mvc.ModelBinding.IValueProvider)">
            <summary>
            Updates the specified model instance using the value provider and a prefix.
            </summary>
            <typeparam name="TModel">The type of the model object.</typeparam>
            <param name="model">The model instance to update.</param>
            <param name="prefix">The prefix to use when looking up values in the value provider.</param>
            <param name="valueProvider">The value provider used for looking up values.</param>
            <returns>true if the update is successful; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.DefaultControllerActionArgumentBinder">
            <summary>
            Provides a default implementation of <see cref="T:Microsoft.AspNet.Mvc.IControllerActionArgumentBinder"/>.
            Uses ModelBinding to populate action parameters.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ControllerActionExecutor.CastToObject(System.Threading.Tasks.Task)">
            <summary>
            Cast Task to Task of object
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ControllerActionExecutor.CastToObject``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Cast Task of T to Task of object
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.DefaultActionDescriptorsCollectionProvider">
            <summary>
            Default implementation for ActionDescriptors.
            This implementation caches the results at first call, and is not responsible for updates.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DefaultActionDescriptorsCollectionProvider.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.DefaultActionDescriptorsCollectionProvider" /> class.
            </summary>
            <param name="serviceProvider">The application IServiceProvider.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.DefaultActionDescriptorsCollectionProvider.ActionDescriptors">
            <summary>
            Returns a cached collection of <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptor" />.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DefaultActionDiscoveryConventions.IsValidActionMethod(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the method is a valid action.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>true if the method is a valid action. Otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DefaultActionSelector.SelectBestActions(System.Collections.Generic.IReadOnlyList{Microsoft.AspNet.Mvc.ActionDescriptor})">
            <summary>
            Returns the set of best matching actions.
            </summary>
            <param name="actions">The set of actions that satisfy all constraints.</param>
            <returns>A list of the best matching actions.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.DefaultControllerActivator">
            <summary>
            Represents the <see cref="T:Microsoft.AspNet.Mvc.IControllerActivator"/> that is registered by default.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DefaultControllerActivator.#ctor">
            <summary>
            Initializes a new instance of the DefaultControllerActivator class.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DefaultControllerActivator.Activate(System.Object,Microsoft.AspNet.Mvc.ActionContext)">
            <summary>
            Activates the specified controller by using the specified action context.
            </summary>
            <param name="controller">The controller to activate.</param>
            <param name="context">The context of the executing action.</param>
        </member>
        <member name="F:Microsoft.AspNet.Mvc.DefaultOrder.DefaultFrameworkSortOrder">
            <summary>
            The default order for sorting is -1000. Other framework code
            the depends on order should be ordered between -1 to -1999.
            User code should order at bigger than 0 or smaller than -2000.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.FilterActionInvoker.FilterCursor">
             <summary>
             A one-way cursor for filters.
             </summary>
             <remarks>
             This will iterate the filter collection once per-stage, and skip any filters that don't have
             the one of interfaces that applies to the current stage.
            
             Filters are always executed in the following order, but short circuiting plays a role.
            
             Indentation reflects nesting.
            
             1. Exception Filters
                 2. Authorization Filters
                 3. Action Filters
                    Action
            
             4. Result Filters
                Result
            
             </remarks>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.FormContext.FormData">
            <summary>
            Property bag for any information you wish to associate with a &lt;form/&gt; in an
            <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> implementation or extension method.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.HttpDeleteAttribute">
            <summary>
            Identifies an action that only supports the HTTP DELETE method.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpDeleteAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.HttpDeleteAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpDeleteAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.HttpDeleteAttribute"/> with the given route template.
            </summary>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.HttpGetAttribute">
            <summary>
            Identifies an action that only supports the HTTP GET method.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpGetAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.HttpGetAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpGetAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.HttpGetAttribute"/> with the given route template.
            </summary>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.HttpMethodAttribute">
            <summary>
            Identifies an action that only supports a given set of HTTP methods.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpMethodAttribute.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.HttpMethodAttribute"/> with the given
            set of HTTP methods.
            <param name="httpMethods">The set of supported HTTP methods.</param>
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpMethodAttribute.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.HttpMethodAttribute"/> with the given
            set of HTTP methods an the given route template.
            </summary>
            <param name="httpMethods">The set of supported methods.</param>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.HttpMethodAttribute.HttpMethods">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.HttpMethodAttribute.Template">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.HttpMethodAttribute.Order">
            <summary>
            Gets the route order. The order determines the order of route execution. Routes with a lower
            order value are tried first. When a route doesn't specify a value, it gets the value of the
            <see cref="P:Microsoft.AspNet.Mvc.RouteAttribute.Order"/> or a default value of 0 if the <see cref="T:Microsoft.AspNet.Mvc.RouteAttribute"/>
            doesn't define a value on the controller.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.HttpMethodAttribute.Microsoft#AspNet#Mvc#Routing#IRouteTemplateProvider#Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.HttpMethodAttribute.Name">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.HttpPatchAttribute">
            <summary>
            Identifies an action that only supports the HTTP PATCH method.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpPatchAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.HttpPatchAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpPatchAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.HttpPatchAttribute"/> with the given route template.
            </summary>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.HttpPostAttribute">
            <summary>
            Identifies an action that only supports the HTTP POST method.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpPostAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.HttpPostAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpPostAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.HttpPostAttribute"/> with the given route template.
            </summary>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.HttpPutAttribute">
            <summary>
            Identifies an action that only supports the HTTP PUT method.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpPutAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.HttpPutAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpPutAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.HttpPutAttribute"/> with the given route template.
            </summary>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IActionDescriptorsCollectionProvider">
             <summary>
             Provides the currently cached collection of <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptor"/>.
             </summary>
             <remarks>
             The default implementation, does not update the cache, it is up to the user
             to create or use an implementation that can update the available actions in
             the application. The implementor is also responsible for updating the
             <see cref="P:Microsoft.AspNet.Mvc.ActionDescriptorsCollection.Version"/> in a thread safe way.
            
             Default consumers of this service, are aware of the version and will recache
             data as appropriate, but rely on the version being unique.
             </remarks>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.IActionDescriptorsCollectionProvider.ActionDescriptors">
            <summary>
            Returns the current cached <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptorsCollection"/>
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IControllerActionArgumentBinder">
            <summary>
            Provides a dictionary of action arguments.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IControllerActionArgumentBinder.GetActionArgumentsAsync(Microsoft.AspNet.Mvc.ActionContext)">
            <summary>
            Returns a dictionary of representing the parameter-argument name-value pairs,
            which can be used to invoke the action.
            </summary>
            <param name="context">The action context assoicated with the current action.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IControllerActivator">
            <summary>
            Provides methods to activate an instantiated controller.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IControllerActivator.Activate(System.Object,Microsoft.AspNet.Mvc.ActionContext)">
            <summary>
            When implemented in a type, activates an instantiated controller.
            </summary>
            <param name="controller">The controller to activate.</param>
            <param name="context">The <see cref="T:Microsoft.AspNet.Mvc.ActionContext"/> for the executing action.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IUrlHelper">
            <summary>
            Defines the contract for the helper to build URLs for ASP.NET MVC within an application.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IUrlHelper.Action(System.String,System.String,System.Object,System.String,System.String,System.String)">
            <summary>
            Generates a fully qualified or absolute URL for an action method by using the specified action name, 
            controller name, route values, protocol to use, host name and fragment.
            </summary>
            <param name="action">The name of the action method.</param>
            <param name="controller">The name of the controller.</param>
            <param name="values">An object that contains the parameters for a route.</param>
            <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
            <param name="host">The host name for the URL.</param>
            <param name="fragment">The fragment for the URL.</param>
            <returns>The fully qualified or absolute URL to an action method.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IUrlHelper.Content(System.String)">
            <summary>
            Converts a virtual (relative) path to an application absolute path.
            </summary>
            <remarks>
            If the specified content path does not start with the tilde (~) character, 
            this method returns <paramref name="contentPath"/> unchanged.
            </remarks>
            <param name="contentPath">The virtual path of the content.</param>
            <returns>The application absolute path.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IUrlHelper.IsLocalUrl(System.String)">
            <summary>
            Returns a value that indicates whether the URL is local.
            </summary>
            <param name="url">The URL.</param>
            <returns>true if the URL is local; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IUrlHelper.RouteUrl(System.String,System.Object,System.String,System.String,System.String)">
            <summary>
            Generates a fully qualified or absolute URL for the specified route values by 
            using the specified route name, protocol to use, host name and fragment.
            </summary>
            <param name="routeName">The name of the route that is used to generate URL.</param>
            <param name="values">An object that contains the parameters for a route.</param>
            <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
            <param name="host">The host name for the URL.</param>
            <param name="fragment">The fragment for the URL.</param>
            <returns>The fully qualified or absolute URL.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.MvcOptions">
            <summary>
            Provides programmatic configuration for the MVC framework.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.MvcOptions.AntiForgeryOptions">
            <summary>
            Provides programmatic configuration for the anti-forgery token system.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.MvcOptions.Filters">
            <summary>
            Gets a list of <see cref="T:Microsoft.AspNet.Mvc.IFilter"/> which are used to construct filters that 
            apply to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.MvcOptions.OutputFormatters">
            <summary>
            Gets a list of the <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.OutputFormatterDescriptor" /> which are used to construct
            a list of <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/> by <see cref="T:Microsoft.AspNet.Mvc.IOutputFormattersProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.MvcOptions.InputFormatters">
            <summary>
            Gets a list of the <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.InputFormatterDescriptor" /> which are used to construct
            a list of <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/> by <see cref="T:Microsoft.AspNet.Mvc.IInputFormattersProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.MvcOptions.ExcludeFromValidationDelegates">
            <summary>
            Gets a list of <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ExcludeFromValidationDelegate"/> which return whether the given type
            should be excluded from Validation in <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IBodyModelValidator"/>
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.MvcOptions.MaxModelValidationErrors">
            <summary>
            Gets or sets the maximum number of validation errors that are allowed by this application before further
            errors are ignored.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.MvcOptions.ModelBinders">
            <summary>
            Get a list of the <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelBinderDescriptor" /> used by the
            Gets a list of the <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelBinderDescriptor" /> used by the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.CompositeModelBinder" />.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.MvcOptions.ModelValidatorProviders">
            <summary>
            Gets a list of the <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor" />s used by
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.CompositeModelValidatorProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.MvcOptions.ViewEngines">
            <summary>
            Gets a list of descriptors that represent <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/> used
            by this application.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.MvcOptions.ValueProviderFactories">
            <summary>
            Gets a list of descriptors that represent
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory"/> used by this application.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.RouteAttribute">
            <summary>
            Specifies an attribute route on a controller. 
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.RouteAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.RouteAttribute"/> with the given route template.
            </summary>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.RouteAttribute.Template">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.RouteAttribute.Order">
            <summary>
            Gets the route order. The order determines the order of route execution. Routes with a lower order
            value are tried first. If an action defines a route by providing an <see cref="T:Microsoft.AspNet.Mvc.Routing.IRouteTemplateProvider"/>
            with a non <c>null</c> order, that order is used instead of this value. If neither the action nor the
            controller defines an order, a default value of 0 is used.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.RouteAttribute.Microsoft#AspNet#Mvc#Routing#IRouteTemplateProvider#Order">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.RouteAttribute.Name">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.RouteConstraintAttribute">
            <summary>
            An attribute which specifies a required route value for an action or controller. 
            
            When placed on an action, the route data of a request must match the expectations of the route
            constraint in order for the action to be selected. See <see cref="P:Microsoft.AspNet.Mvc.RouteConstraintAttribute.RouteKeyHandling"/> for 
            the expectations that must be satisfied by the route data.
            
            When placed on a controller, unless overridden by the action, the constraint applies to all
            actions defined by the controller.
            
            
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.RouteConstraintAttribute.#ctor(System.String,Microsoft.AspNet.Mvc.RouteKeyHandling)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.RouteConstraintAttribute"/>.
            </summary>
            <param name="routeKey">The route value key.</param>
            <param name="keyHandling">
            The <see cref="P:Microsoft.AspNet.Mvc.RouteConstraintAttribute.RouteKeyHandling"/> value. Must be <see cref="F:Microsoft.AspNet.Mvc.RouteKeyHandling.CatchAll"/> 
            or <see cref="F:Microsoft.AspNet.Mvc.RouteKeyHandling.DenyKey"/>.
            </param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.RouteConstraintAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.RouteConstraintAttribute"/> with 
            <see cref="P:Microsoft.AspNet.Mvc.RouteConstraintAttribute.RouteKeyHandling"/> set to <see cref="F:Microsoft.AspNet.Mvc.RouteKeyHandling.RequireKey"/>.
            </summary>
            <param name="routeKey">The route value key.</param>
            <param name="routeValue">The expected route value.</param>
            <param name="blockNonAttributedActions">
            Set to true to negate this constraint on all actions that do not define a behavior for this route key.
            </param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.RouteConstraintAttribute.RouteKey">
            <summary>
            The route value key.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.RouteConstraintAttribute.RouteKeyHandling">
            <summary>
            The <see cref="P:Microsoft.AspNet.Mvc.RouteConstraintAttribute.RouteKeyHandling"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.RouteConstraintAttribute.RouteValue">
            <summary>
            The expected route value. Will be null unless <see cref="P:Microsoft.AspNet.Mvc.RouteConstraintAttribute.RouteKeyHandling"/> is
            set to <see cref="F:Microsoft.AspNet.Mvc.RouteKeyHandling.RequireKey"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.RouteConstraintAttribute.BlockNonAttributedActions">
            <summary>
            Set to true to negate this constraint on all actions that do not define a behavior for this route key.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.RouteDataActionConstraint">
            <summary>
            Constraints an action to a route key and value.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.RouteDataActionConstraint.#ctor(System.String,System.String)">
            <summary>
            Initializes a <see cref="T:Microsoft.AspNet.Mvc.RouteDataActionConstraint"/> with a key and value, that are
            required to make the action match.
            </summary>
            <param name="routeKey">The route key.</param>
            <param name="routeValue">The route value.</param>
            <remarks>
            Passing a <see cref="F:System.String.Empty"/> or <see langword="null" /> to <paramref name="routeValue"/>
            is a way to express that routing cannot produce a value for this key.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.RouteDataActionConstraint.CreateCatchAll(System.String)">
            <summary>
            Create a catch all constraint for the given key.
            </summary>
            <param name="routeKey">Route key.</param>
            <returns>a <see cref="T:Microsoft.AspNet.Mvc.RouteDataActionConstraint"/> that represents a catch all constraint.</returns>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.RouteDataActionConstraint.RouteKey">
            <summary>
            The route key this constraint matches against.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.RouteDataActionConstraint.RouteValue">
            <summary>
            The route value this constraint matches against.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.RouteDataActionConstraint.KeyHandling">
            <summary>
            The key handling definition for this constraint.
            </summary>
        </member>
        <member name="F:Microsoft.AspNet.Mvc.RouteKeyHandling.RequireKey">
            <summary>
            Requires that the key will be in the route values, and that the content matches.
            </summary>
        </member>
        <member name="F:Microsoft.AspNet.Mvc.RouteKeyHandling.DenyKey">
            <summary>
            Requires that the key will not be in the route values.
            </summary>
        </member>
        <member name="F:Microsoft.AspNet.Mvc.RouteKeyHandling.CatchAll">
            <summary>
            Requires that the key will be in the route values, but ignore the content.
            Constraints with this value are considered less important than ones with 
            <see cref="F:Microsoft.AspNet.Mvc.RouteKeyHandling.RequireKey"/>
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.TemplateInfo.FormattedModelValue">
            <summary>
            Gets or sets the formatted model value.
            </summary>
            <remarks>
            Will never return <c>null</c> to avoid problems when using HTML helpers within a template.  Otherwise the
            helpers could find elements in the `ViewDataDictionary`, not the intended Model properties.
            </remarks>
            <value>The formatted model value.</value>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix">
            <summary>
            Gets or sets the HTML field prefix.
            </summary>
            <remarks>
            Will never return <c>null</c> for consistency with <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.FormattedModelValue"/>.
            </remarks>
            <value>The HTML field prefix.</value>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.UrlHelper">
            <summary>
            An implementation of <see cref="T:Microsoft.AspNet.Mvc.IUrlHelper"/> that contains methods to 
            build URLs for ASP.NET MVC within an application.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.UrlHelper.#ctor(Microsoft.Framework.DependencyInjection.IContextAccessor{Microsoft.AspNet.Mvc.ActionContext},Microsoft.AspNet.Mvc.IActionSelector)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.UrlHelper"/> class using the specified action context and action selector.
            </summary>
            <param name="contextAccessor">The <see cref="T:Microsoft.Framework.DependencyInjection.IContextAccessor`1"/> to access the action context
            of the current request.</param>
            <param name="actionSelector">The <see cref="T:Microsoft.AspNet.Mvc.IActionSelector"/> to be used for verifying the correctness of
            supplied parameters for a route.
            </param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.UrlHelper.Action(System.String,System.String,System.Object,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.UrlHelper.IsLocalUrl(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.UrlHelper.RouteUrl(System.String,System.Object,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.UrlHelper.GeneratePathFromRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Generates the absolute path of the url for the specified route values by 
            using the specified route name.
            </summary>
            <param name="routeName">The name of the route that is used to generate the URL.</param>
            <param name="values">A dictionary that contains the parameters for a route.</param>
            <returns>The absolute path of the URL.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.UrlHelper.Content(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ViewContext.Html5DateRenderingMode">
            <summary>
            Set this property to <see cref="F:Microsoft.AspNet.Mvc.Rendering.Html5DateRenderingMode.Rfc3339" /> to have templated helpers such as
            <see cref="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Editor(System.String,System.String,System.String,System.Object)" /> and <see cref="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.EditorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String,System.Object)" /> render date and time
            values as RFC 3339 compliant strings. By default these helpers render dates and times using the current
            culture.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ViewContext.ValidationSummaryMessageElement">
            <summary>
            Element name used to wrap a top-level message generated by <see cref="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ValidationSummary(System.Boolean,System.String,System.Object,System.String)"/> and
            other overloads.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement">
            <summary>
            Element name used to wrap a top-level message generated by <see cref="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ValidationMessage(System.String,System.String,System.Object,System.String)"/> and
            other overloads.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ViewDataDictionary.#ctor(Microsoft.AspNet.Mvc.ViewDataDictionary)">
            <summary>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> copy constructor for use when model type does not change or caller will
            immediately set the <see cref="P:Microsoft.AspNet.Mvc.ViewDataDictionary.Model"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ViewDataDictionary.#ctor(Microsoft.AspNet.Mvc.ViewDataDictionary,System.Object)">
            <summary>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> copy constructor for use when model type may change. This avoids
            exceptions a derived class may throw when <see cref="M:Microsoft.AspNet.Mvc.ViewDataDictionary.SetModel(System.Object)"/> is called.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ViewDataDictionary.MetadataProvider">
            <summary>
            Provider for subclasses that need it to override <see cref="P:Microsoft.AspNet.Mvc.ViewDataDictionary.ModelMetadata"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ViewDataDictionary`1.#ctor(Microsoft.AspNet.Mvc.ViewDataDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ViewDataDictionary`1.#ctor(Microsoft.AspNet.Mvc.ViewDataDictionary,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ActionConstraintContext">
            <summary>
            Context for <see cref="T:Microsoft.AspNet.Mvc.IActionConstraint"/> execution.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionConstraintContext.Candidates">
            <summary>
            The list of <see cref="T:Microsoft.AspNet.Mvc.ActionSelectorCandidate"/>. This includes all actions that are valid for the current
            request, as well as their constraints.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionConstraintContext.CurrentCandidate">
            <summary>
            The current <see cref="T:Microsoft.AspNet.Mvc.ActionSelectorCandidate"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionConstraintContext.RouteContext">
            <summary>
            The <see cref="P:Microsoft.AspNet.Mvc.ActionConstraintContext.RouteContext"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ActionConstraintItem">
            <summary>
            Represents an <see cref="T:Microsoft.AspNet.Mvc.IActionConstraintMetadata"/> with or without a corresponding
            <see cref="T:Microsoft.AspNet.Mvc.IActionConstraint"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ActionConstraintItem.#ctor(Microsoft.AspNet.Mvc.IActionConstraintMetadata)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.ActionConstraintItem"/>.
            </summary>
            <param name="metadata">The <see cref="T:Microsoft.AspNet.Mvc.IActionConstraintMetadata"/> instance.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionConstraintItem.Constraint">
            <summary>
            The <see cref="T:Microsoft.AspNet.Mvc.IActionConstraint"/> associated with <see cref="P:Microsoft.AspNet.Mvc.ActionConstraintItem.Metadata"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionConstraintItem.Metadata">
            <summary>
            The <see cref="T:Microsoft.AspNet.Mvc.IActionConstraintMetadata"/> instance.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ActionConstraintProviderContext">
            <summary>
            Context for an action constraint provider.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ActionConstraintProviderContext.#ctor(Microsoft.AspNet.Mvc.ActionDescriptor,System.Collections.Generic.IList{Microsoft.AspNet.Mvc.ActionConstraintItem})">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.ActionConstraintProviderContext"/>.
            </summary>
            <param name="action">The <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptor"/> for which constraints are being created.</param>
            <param name="items">The list of <see cref="T:Microsoft.AspNet.Mvc.ActionConstraintItem"/> objects.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionConstraintProviderContext.Action">
            <summary>
            The <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptor"/> for which constraints are being created.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionConstraintProviderContext.Results">
            <summary>
            The list of <see cref="T:Microsoft.AspNet.Mvc.ActionConstraintItem"/> objects.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ActionMethodSelectorAttribute">
            <summary>
            Base class for attributes which can implement conditional logic to enable or disable an action
            for a given request. See <see cref="T:Microsoft.AspNet.Mvc.IActionConstraint"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionMethodSelectorAttribute.Order">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ActionMethodSelectorAttribute.Accept(Microsoft.AspNet.Mvc.ActionConstraintContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ActionMethodSelectorAttribute.IsValidForRequest(Microsoft.AspNet.Routing.RouteContext,Microsoft.AspNet.Mvc.ActionDescriptor)">
            <summary>
            Determines whether the action selection is valid for the specified route context.
            </summary>
            <param name="routeContext">The route context.</param>
            <param name="action">Information about the action.</param>
            <returns>
            <see langword="true"/> if the action  selection is valid for the specified context; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ActionSelectorCandidate">
            <summary>
            A candidate action for action selection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ActionSelectorCandidate.#ctor(Microsoft.AspNet.Mvc.ActionDescriptor,System.Collections.Generic.IReadOnlyList{Microsoft.AspNet.Mvc.IActionConstraint})">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.ActionSelectorCandidate"/>.
            </summary>
            <param name="action">The <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptor"/> representing a candidate for selection.</param>
            <param name="constraints">
            The list of <see cref="T:Microsoft.AspNet.Mvc.IActionConstraint"/> instances associated with <paramref name="action"/>.
            </param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionSelectorCandidate.Action">
            <summary>
            The <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptor"/> representing a candiate for selection.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ActionSelectorCandidate.Constraints">
            <summary>
            The list of <see cref="T:Microsoft.AspNet.Mvc.IActionConstraint"/> instances associated with <see name="Action"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.DefaultActionConstraintProvider">
            <summary>
            A default implementation of <see cref="T:Microsoft.Framework.DependencyInjection.INestedProvider`1"/>.
            </summary>
            <remarks>
            This provider is able to provide an <see cref="T:Microsoft.AspNet.Mvc.IActionConstraint"/> instance when the 
            <see cref="T:Microsoft.AspNet.Mvc.IActionConstraintMetadata"/> implements <see cref="T:Microsoft.AspNet.Mvc.IActionConstraint"/> or 
            <see cref="T:Microsoft.AspNet.Mvc.IActionConstraintFactory"/>/
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DefaultActionConstraintProvider.#ctor(System.IServiceProvider)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.DefaultActionConstraintProvider"/>.
            </summary>
            <param name="services">The per-request services.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.DefaultActionConstraintProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DefaultActionConstraintProvider.Invoke(Microsoft.AspNet.Mvc.ActionConstraintProviderContext,System.Action)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IActionConstraint">
            <summary>
            Supports conditional logic to determine whether or not an associated action is valid to be selected
            for the given request.
            </summary>
            <remarks>
            Action constraints have the secondary effect of making an action with a constraint applied a better
            match than one without. 
            
            Consider two actions, 'A' and 'B' with the same action and controller name. Action 'A' only allows the
            HTTP POST method (via a constraint) and action 'B' has no constraints.
            
            If an incoming request is a POST, then 'A' is considered the best match because it both matches and
            has a constraint. If an incoming request uses any other verb, 'A' will not be valid for selection
            due to it's constraint, so 'B' is the best match.
            
            
            Action constraints are also grouped according to their order value. Any constraints with the same
            group value are considered to be part of the same application policy, and will be executed in the
            same stage.
            
            Stages run in ascending order based on the value of <see cref="P:Microsoft.AspNet.Mvc.IActionConstraint.Order"/>. Given a set of actions which
            are candidates for selection, the next stage to run is the lowest value of <see cref="P:Microsoft.AspNet.Mvc.IActionConstraint.Order"/> for any
            constraint of any candidate which is greater than the order of the last stage.
            
            Once the stage order is identified, each action has all of it's constraints in that stage executed.
            If any constraint does not match, then that action is not a candidate for selection. If any actions
            with constraints in the current state are still candidates, then those are the 'best' actions and this
            process will repeat with the next stage on the set of 'best' actions. If after processing the 
            subsequent stages of the 'best' actions no candidates remain, this process will repeat on the set of
            'other' candidate actions from this stage (those without a constraint).
            </remarks>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.IActionConstraint.Order">
            <summary>
            The constraint order. 
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IActionConstraint.Accept(Microsoft.AspNet.Mvc.ActionConstraintContext)">
            <summary>
            Determines whether an action is a valid candidate for selection.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNet.Mvc.ActionConstraintContext"/>.</param>
            <returns>True if the action is valid for selection, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IActionConstraintFactory">
            <summary>
            A factory for <see cref="T:Microsoft.AspNet.Mvc.IActionConstraint"/>. 
            </summary>
            <remarks>
            <see cref="T:Microsoft.AspNet.Mvc.IActionConstraintFactory"/> will be invoked by <see cref="T:Microsoft.AspNet.Mvc.DefaultActionConstraintProvider"/>
            to create constraint instances for an action.
            
            Place an attribute implementing this interface on a controller or action to insert an action
            constraint created by a factory.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IActionConstraintFactory.CreateInstance(System.IServiceProvider)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.IActionConstraint"/>.
            </summary>
            <param name="services">The per-request services.</param>
            <returns>An <see cref="T:Microsoft.AspNet.Mvc.IActionConstraint"/>.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IActionConstraintMetadata">
            <summary>
            A marker interface that identifies a type as metadata for an <see cref="T:Microsoft.AspNet.Mvc.IActionConstraint"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.EmptyResult">
            <summary>
            Represents an <see cref="T:Microsoft.AspNet.Mvc.ActionResult"/> that when executed will
            do nothing.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.EmptyResult.ExecuteResult(Microsoft.AspNet.Mvc.ActionContext)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.FileContentResult">
            <summary>
            Represents an <see cref="T:Microsoft.AspNet.Mvc.ActionResult"/> that when executed will
            write a binary file to the response.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FileContentResult.#ctor(System.Byte[],System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.FileContentResult"/> instance with
            the provided <paramref name="fileContents"/> and the
            provided <paramref name="contentType"/>.
            </summary>
            <param name="fileContents">The bytes that represent the file contents.</param>
            <param name="contentType">The Content-Type header of the response.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.FileContentResult.FileContents">
            <summary>
            Gets the file contents.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FileContentResult.WriteFileAsync(Microsoft.AspNet.Http.HttpResponse,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.FilePathResult">
            <summary>
            Represents an <see cref="T:Microsoft.AspNet.Mvc.ActionResult"/> that when executed will
            write a file from disk to the response using mechanisms provided
            by the host.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FilePathResult.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.FilePathResult"/> instance with
            the provided <paramref name="fileName"/> and the
            provided <paramref name="contentType"/>.
            </summary>
            <param name="fileName">The path to the file. The path must be an absolute
            path. Relative and virtual paths are not supported.</param>
            <param name="contentType">The Content-Type header of the response.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FilePathResult.#ctor(System.String,System.String,Microsoft.AspNet.FileSystems.IFileSystem)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.FilePathResult"/> instance with
            the provided <paramref name="fileName"/> and the
            provided <paramref name="contentType"/>.
            </summary>
            <param name="fileName">The path to the file. The path must be an absolute
            path. Relative and virtual paths are not supported.</param>
            <param name="contentType">The Content-Type header of the response.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.FilePathResult.FileName">
            <summary>
            Gets the path to the file that will be sent back as the response.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.FilePathResult.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.AspNet.FileSystems.IFileSystem"/> used to resolve paths.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FilePathResult.WriteFileAsync(Microsoft.AspNet.Http.HttpResponse,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FilePathResult.NormalizePath(System.String)">
            <summary>
            Creates a normalized representation of the given <paramref name="path"/>. The default
            implementation doesn't support files with '\' in the file name and treats the '\' as
            a directory separator. The default implementation will convert all the '\' into '/'
            and will remove leading '~' characters.
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FilePathResult.IsPathRooted(System.String)">
            <summary>
            Determines if the provided path is absolute or relative. The default implementation considers
            paths starting with '/' to be relative.
            </summary>
            <param name="path">The path to examine.</param>
            <returns>True if the path is absolute.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.FileResult">
            <summary>
            Represents an <see cref="T:Microsoft.AspNet.Mvc.ActionResult"/> that when executed will
            write a file as the response.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FileResult.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.FileResult"/> instance with
            the provided <paramref name="contentType"/>.
            </summary>
            <param name="contentType">The Content-Type header of the response.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.FileResult.ContentType">
            <summary>
            Gets the Content-Type header value that will be written to the response.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.FileResult.FileDownloadName">
            <summary>
            Gets the file name that will be used in the Content-Disposition header of the response.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FileResult.ExecuteResultAsync(Microsoft.AspNet.Mvc.ActionContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FileResult.WriteFileAsync(Microsoft.AspNet.Http.HttpResponse,System.Threading.CancellationToken)">
            <summary>
            Writes the file to the response.
            </summary>
            <param name="response">
            The <see cref="T:Microsoft.AspNet.Http.HttpResponse"/> where the file will be written
            </param>
            <param name="cancellation">The <see cref="T:System.Threading.CancellationToken"/>to cancel the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that will complete when the file has been written to the response.
            </returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.FileStreamResult">
            <summary>
            Represents an <see cref="T:Microsoft.AspNet.Mvc.ActionResult"/> that when executed will
            write a file from a stream to the response.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FileStreamResult.#ctor(System.IO.Stream,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.FileStreamResult"/> instance with
            the provided <paramref name="fileStream"/> and the
            provided <paramref name="contentType"/>.
            </summary>
            <param name="fileStream">The stream with the file.</param>
            <param name="contentType">The Content-Type header of the response.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.FileStreamResult.FileStream">
            <summary>
            Gets the stream with the file that will be sent back as the response.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FileStreamResult.WriteFileAsync(Microsoft.AspNet.Http.HttpResponse,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.HttpNotFoundResult">
            <summary>
            Represents an <see cref="T:Microsoft.AspNet.Mvc.HttpStatusCodeResult"/> that when
            executed will produce a Not Found (404) response.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpNotFoundResult.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.HttpNotFoundResult"/> instance.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.HttpStatusCodeResult">
            <summary>
            Represents an <see cref="T:Microsoft.AspNet.Mvc.ActionResult"/> that when executed will
            produce an HTTP response with the given response status code.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpStatusCodeResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.HttpStatusCodeResult"/> class
            with the given <paramref name="statusCode"/>.
            </summary>
            <param name="statusCode">The HTTP status code of the response.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.HttpStatusCodeResult.StatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpStatusCodeResult.ExecuteResult(Microsoft.AspNet.Mvc.ActionContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.JsonResult.#ctor(System.Object,Microsoft.AspNet.Mvc.IOutputFormatter)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.AspNet.Mvc.JsonResult"/> class.
            </summary>
            <param name="data"></param>
            <param name="defaultFormatter">If no matching formatter is found, 
            the response is written to using defaultFormatter.</param>
            <remarks>
            The default formatter must be able to handle either application/json
            or text/json.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.PartialViewResult">
            <summary>
            Represents a <see cref="T:Microsoft.AspNet.Mvc.ViewResultBase"/> that renders a partial view.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.PartialViewResult.FindView(Microsoft.AspNet.Mvc.Rendering.IViewEngine,Microsoft.AspNet.Mvc.ActionContext,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ViewResult">
            <summary>
            Represents a <see cref="T:Microsoft.AspNet.Mvc.ViewResultBase"/> that renders a view to the response.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ViewResult.FindView(Microsoft.AspNet.Mvc.Rendering.IViewEngine,Microsoft.AspNet.Mvc.ActionContext,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ViewResultBase">
            <summary>
            Represents the base type for an <see cref="T:Microsoft.AspNet.Mvc.ActionResult"/> that renders a view to the response.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ViewResultBase.FindView(Microsoft.AspNet.Mvc.Rendering.IViewEngine,Microsoft.AspNet.Mvc.ActionContext,System.String)">
            <summary>
            Attempts to locate the view named <paramref name="viewName"/> using the specified 
            <paramref name="viewEngine"/>.
            </summary>
            <param name="viewEngine">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/> used to locate the view.</param>
            <param name="context">The <see cref="T:Microsoft.AspNet.Mvc.ActionContext"/> for the executing action.</param>
            <param name="viewName">The view to find.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.AntiForgery">
            <summary>
            Provides access to the anti-forgery system, which provides protection against
            Cross-site Request Forgery (XSRF, also called CSRF) attacks.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.AntiForgery.GetHtml(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            Generates an anti-forgery token for this request. This token can
            be validated by calling the Validate() method.
            </summary>
            <param name="context">The HTTP context associated with the current call.</param>
            <returns>An HTML string corresponding to an &lt;input type="hidden"&gt;
            element. This element should be put inside a &lt;form&gt;.</returns>
            <remarks>
            This method has a side effect:
            A response cookie is set if there is no valid cookie associated with the request.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.AntiForgery.GetTokens(Microsoft.AspNet.Http.HttpContext,System.String)">
            <summary>
            Generates an anti-forgery token pair (cookie and form token) for this request.
            This method is similar to GetHtml(HttpContext context), but this method gives the caller control
            over how to persist the returned values. To validate these tokens, call the
            appropriate overload of Validate.
            </summary>
            <param name="context">The HTTP context associated with the current call.</param>
            <param name="oldCookieToken">The anti-forgery token - if any - that already existed
            for this request. May be null. The anti-forgery system will try to reuse this cookie
            value when generating a matching form token.</param>
            <remarks>
            Unlike the GetHtml(HttpContext context) method, this method has no side effect. The caller
            is responsible for setting the response cookie and injecting the returned
            form token as appropriate.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.AntiForgery.ValidateAsync(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            Validates an anti-forgery token that was supplied for this request.
            The anti-forgery token may be generated by calling GetHtml(HttpContext context).
            </summary>
            <param name="context">The HTTP context associated with the current call.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.AntiForgery.Validate(Microsoft.AspNet.Http.HttpContext,System.String,System.String)">
            <summary>
            Validates an anti-forgery token pair that was generated by the GetTokens method.
            </summary>
            <param name="context">The HTTP context associated with the current call.</param>
            <param name="cookieToken">The token that was supplied in the request cookie.</param>
            <param name="formToken">The token that was supplied in the request form body.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.AntiForgeryContext">
            <summary>
            Used as a per request state.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.AntiForgeryOptions">
            <summary>
            Provides programmatic configuration for the anti-forgery token system.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.AntiForgeryOptions.CookieName">
            <summary>
            Specifies the name of the cookie that is used by the anti-forgery
            system.
            </summary>
            <remarks>
            If an explicit name is not provided, the system will automatically
            generate a name.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.AntiForgeryOptions.FormFieldName">
            <summary>
            Specifies the name of the anti-forgery token field that is used by the anti-forgery system.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.AntiForgeryOptions.RequireSSL">
            <summary>
            Specifies whether SSL is required for the anti-forgery system
            to operate. If this setting is 'true' and a non-SSL request
            comes into the system, all anti-forgery APIs will fail.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.AntiForgeryOptions.SuppressXFrameOptionsHeader">
            <summary>
            Specifies whether to suppress the generation of X-Frame-Options header
            which is used to prevent ClickJacking. By default, the X-Frame-Options
            header is generated with the value SAMEORIGIN. If this setting is 'true',
            the X-Frame-Options header will not be generated for the response.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IAntiForgeryAdditionalDataProvider">
            <summary>
            Allows providing or validating additional custom data for anti-forgery tokens.
            For example, the developer could use this to supply a nonce when the token is
            generated, then he could validate the nonce when the token is validated.
            </summary>
            <remarks>
            The anti-forgery system already embeds the client's username within the
            generated tokens. This interface provides and consumes <em>supplemental</em>
            data. If an incoming anti-forgery token contains supplemental data but no
            additional data provider is configured, the supplemental data will not be
            validated.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IAntiForgeryAdditionalDataProvider.GetAdditionalData(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            Provides additional data to be stored for the anti-forgery tokens generated
            during this request.
            </summary>
            <param name="context">Information about the current request.</param>
            <returns>Supplemental data to embed within the anti-forgery token.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IAntiForgeryAdditionalDataProvider.ValidateAdditionalData(Microsoft.AspNet.Http.HttpContext,System.String)">
            <summary>
            Validates additional data that was embedded inside an incoming anti-forgery
            token.
            </summary>
            <param name="context">Information about the current request.</param>
            <param name="additionalData">Supplemental data that was embedded within the token.</param>
            <returns>True if the data is valid; false if the data is invalid.</returns>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ApplicationModel.ActionModel.ApiExplorerIsVisible">
            <summary>
            If <c>true</c>, <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/> objects will be created for this action. 
            If <c>null</c> then the value of <see cref="P:Microsoft.AspNet.Mvc.ApplicationModel.ControllerModel.ApiExplorerIsVisible"/> will be used.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ApplicationModel.ActionModel.ApiExplorerGroupName">
            <summary>
            The value for <see cref="P:Microsoft.AspNet.Mvc.Description.ApiDescription.GroupName"/> of 
            <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/> objects created for actions defined by this controller.
            If <c>null</c> then the value of <see cref="P:Microsoft.AspNet.Mvc.ApplicationModel.ControllerModel.ApiExplorerGroupName"/> will be used.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ApplicationModel.AttributeRouteModel.CombineAttributeRouteModel(Microsoft.AspNet.Mvc.ApplicationModel.AttributeRouteModel,Microsoft.AspNet.Mvc.ApplicationModel.AttributeRouteModel)">
            <summary>
            Combines two <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.AttributeRouteModel"/> instances and returns
            a new <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.AttributeRouteModel"/> instance with the result.
            </summary>
            <param name="left">The left <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.AttributeRouteModel"/>.</param>
            <param name="right">The right <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.AttributeRouteModel"/>.</param>
            <returns>A new instance of <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.AttributeRouteModel"/> that represents the
            combination of the two <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.AttributeRouteModel"/> instances or <c>null</c> if both
            parameters are <c>null</c>.</returns>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ApplicationModel.ControllerModel.ApiExplorerIsVisible">
            <summary>
            If <c>true</c>, <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/> objects will be created for actions defined by
            this controller. 
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ApplicationModel.ControllerModel.ApiExplorerGroupName">
            <summary>
            The value for <see cref="P:Microsoft.AspNet.Mvc.Description.ApiDescription.GroupName"/> of 
            <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/> objects created for actions defined by this controller.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ApplicationModel.IActionModelConvention">
            <summary>
            Allows customization of the of the <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.ActionModel"/>.
            </summary>
            <remarks>
            To use this interface, create an <see cref="T:System.Attribute"/> class which implements the interface and
            place it on an action method.
            
            <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.IActionModelConvention"/> customizations run after 
            <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.IActionModelConvention"/> customications and before 
            <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.IParameterModelConvention"/> customizations.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ApplicationModel.IActionModelConvention.Apply(Microsoft.AspNet.Mvc.ApplicationModel.ActionModel)">
            <summary>
            Called to apply the convention to the <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.ActionModel"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.ActionModel"/>.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ApplicationModel.IControllerModelConvention">
            <summary>
            Allows customization of the of the <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.ControllerModel"/>.
            </summary>
            <remarks>
            To use this interface, create an <see cref="T:System.Attribute"/> class which implements the interface and
            place it on a controller class.
            
            <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.IControllerModelConvention"/> customizations run after 
            <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.IGlobalModelConvention"/> customizations and before 
            <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.IActionModelConvention"/> customizations.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ApplicationModel.IControllerModelConvention.Apply(Microsoft.AspNet.Mvc.ApplicationModel.ControllerModel)">
            <summary>
            Called to apply the convention to the <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.ControllerModel"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.ControllerModel"/>.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ApplicationModel.IGlobalModelConvention">
            <summary>
            Allows customization of the of the <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.GlobalModel"/>.
            </summary>
            <remarks>
            Implementaions of this interface can be registered in <see cref="P:Microsoft.AspNet.Mvc.MvcOptions.ApplicationModelConventions"/>
            to customize metadata about the application.
            
            <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.IGlobalModelConvention"/> run before other types of customizations to the
            reflected model.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ApplicationModel.IGlobalModelConvention.Apply(Microsoft.AspNet.Mvc.ApplicationModel.GlobalModel)">
            <summary>
            Called to apply the convention to the <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.GlobalModel"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.GlobalModel"/>.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ApplicationModel.IParameterModelConvention">
            <summary>
            Allows customization of the of the <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.ControllerModel"/>.
            </summary>
            <remarks>
            To use this interface, create an <see cref="T:System.Attribute"/> class which implements the interface and
            place it on an action method parameter.
            
            <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.IParameterModelConvention"/> customizations run after 
            <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.IActionModelConvention"/> customizations.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ApplicationModel.IParameterModelConvention.Apply(Microsoft.AspNet.Mvc.ApplicationModel.ParameterModel)">
            <summary>
            Called to apply the convention to the <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.ParameterModel"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.AspNet.Mvc.ApplicationModel.ParameterModel"/>.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Description.ApiDescription">
            <summary>
            Represents an API exposed by this application.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Description.ApiDescription.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescription.ActionDescriptor">
            <summary>
            The <see cref="P:Microsoft.AspNet.Mvc.Description.ApiDescription.ActionDescriptor"/> for this api.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescription.GroupName">
            <summary>
            The group name for this api.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescription.HttpMethod">
            <summary>
            The supported HTTP method for this api, or null if all HTTP methods are supported.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescription.ParameterDescriptions">
            <summary>
            The list of <see cref="T:Microsoft.AspNet.Mvc.Description.ApiParameterDescription"/> for this api.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescription.Properties">
            <summary>
            Stores arbitrary metadata properties associated with the <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescription.RelativePath">
            <summary>
            The relative url path template (relative to application root) for this api.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescription.ResponseModelMetadata">
            <summary>
            The <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/> for the <see cref="P:Microsoft.AspNet.Mvc.Description.ApiDescription.ResponseType"/> or null.
            </summary>
            <remarks>
            Will be null if <see cref="P:Microsoft.AspNet.Mvc.Description.ApiDescription.ResponseType"/> is null.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescription.ResponseType">
            <summary>
            The CLR data type of the response or null.
            </summary>
            <remarks>
            Will be null if the action returns no response, or if the response type is unclear. Use 
            <see cref="T:Microsoft.AspNet.Mvc.ProducesAttribute"/> on an action method to specify a response type.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescription.SupportedResponseFormats">
            <summary>
            A list of possible formats for a response.
            </summary>
            <remarks>
            Will be empty if the action returns no response, or if the response type is unclear. Use
            <see cref="T:Microsoft.AspNet.Mvc.ProducesAttribute"/> on an action method to specify a response type.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionActionData">
            <summary>
            Represents data used to build an <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/>, stored as part of the 
            <see cref="P:Microsoft.AspNet.Mvc.ActionDescriptor.Properties"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescriptionActionData.GroupName">
            <summary>
            The <see cref="P:Microsoft.AspNet.Mvc.Description.ApiDescription.GroupName"/> of <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/> objects for the associated 
            action.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroupCollectionProvider">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroupCollectionProvider.#ctor(Microsoft.AspNet.Mvc.IActionDescriptorsCollectionProvider,Microsoft.Framework.DependencyInjection.INestedProviderManager{Microsoft.AspNet.Mvc.Description.ApiDescriptionProviderContext})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroupCollectionProvider"/>.
            </summary>
            <param name="actionDescriptorCollectionProvider">
            The <see cref="T:Microsoft.AspNet.Mvc.IActionDescriptorsCollectionProvider"/>.
            </param>
            <param name="apiDescriptionProvider">
            The <see cref="T:Microsoft.Framework.DependencyInjection.INestedProviderManager`1"/>.
            </param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroupCollectionProvider.ApiDescriptionGroups">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Description.ApiDescriptionExtensions.GetProperty``1(Microsoft.AspNet.Mvc.Description.ApiDescription)">
            <summary>
            Gets the value of a property from the <see cref="P:Microsoft.AspNet.Mvc.Description.ApiDescription.Properties"/> collection 
            using the provided value of <typeparamref name="T"/> as the key.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="apiDescription">The <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/>.</param>
            <returns>The property or the default value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Description.ApiDescriptionExtensions.SetProperty``1(Microsoft.AspNet.Mvc.Description.ApiDescription,``0)">
            <summary>
            Sets the value of an property in the <see cref="P:Microsoft.AspNet.Mvc.Description.ApiDescription.Properties"/> collection using
            the provided value of <typeparamref name="T"/> as the key.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="apiDescription">The <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/>.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroup">
            <summary>
            Represents a group of related apis.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroup.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.AspNet.Mvc.Description.ApiDescription})">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroup"/>.
            </summary>
            <param name="groupName">The group name.</param>
            <param name="items">A collection of <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/> items for this group.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroup.GroupName">
            <summary>
            The group name.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroup.Items">
            <summary>
            A collection of <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/> items for this group.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroupCollection">
            <summary>
            A cached collection of <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroup" />.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroupCollection.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.AspNet.Mvc.Description.ApiDescriptionGroup},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroupCollection"/>.
            </summary>
            <param name="items">The list of <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroup"/>.</param>
            <param name="version">The unique version of discovered groups.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroupCollection.Items">
            <summary>
            Returns the list of <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroupCollection.Version">
            <summary>
            Returns the unique version of the current items.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionProviderContext">
            <summary>
            A context object for <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/> providers.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Description.ApiDescriptionProviderContext.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.AspNet.Mvc.ActionDescriptor})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionProviderContext"/>.
            </summary>
            <param name="actions">The list of actions.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescriptionProviderContext.Actions">
            <summary>
            The list of actions.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiDescriptionProviderContext.Results">
            <summary>
            The list of resulting <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Description.ApiResponseFormat">
            <summary>
            Represents a possible format for the body of a response.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiResponseFormat.Formatter">
            <summary>
            The formatter used to output this response.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.ApiResponseFormat.MediaType">
            <summary>
            The media type of the response.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Description.DefaultApiDescriptionProvider">
            <summary>
            Implements a provider of <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/> for actions represented
            by <see cref="T:Microsoft.AspNet.Mvc.ControllerActionDescriptor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Description.DefaultApiDescriptionProvider.#ctor(Microsoft.AspNet.Mvc.IOutputFormattersProvider,Microsoft.AspNet.Routing.IInlineConstraintResolver,Microsoft.AspNet.Mvc.ModelBinding.IModelMetadataProvider)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.Description.DefaultApiDescriptionProvider"/>.
            </summary>
            <param name="formattersProvider">The <see cref="T:Microsoft.AspNet.Mvc.IOutputFormattersProvider"/>.</param>
            <param name="modelMetadataProvider">The <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelMetadataProvider"/>.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.DefaultApiDescriptionProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Description.DefaultApiDescriptionProvider.Invoke(Microsoft.AspNet.Mvc.Description.ApiDescriptionProviderContext,System.Action)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Description.IApiDescriptionGroupCollectionProvider">
            <summary>
            Provides access to a collection of <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroup"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.IApiDescriptionGroupCollectionProvider.ApiDescriptionGroups">
            <summary>
            Gets a collection of <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescriptionGroup"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Description.IApiDescriptionGroupNameProvider">
            <summary>
            Represents group name metadata for an <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.IApiDescriptionGroupNameProvider.GroupName">
            <summary>
            The group name for the <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/> of the associated action or controller.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Description.IApiDescriptionVisibilityProvider">
            <summary>
            Represents visibility metadata for an <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.IApiDescriptionVisibilityProvider.IgnoreApi">
            <summary>
            If <c>false</c> then no <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/> objects will be created for the associated controller
            or action.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Description.IApiResponseMetadataProvider">
            <summary>
            Provides a return type and a set of possible content types returned by a successful execution of the action.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Description.IApiResponseMetadataProvider.Type">
            <summary>
            Optimistic return type of the action.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Description.IApiResponseMetadataProvider.SetContentTypes(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.HeaderValueAbstractions.MediaTypeHeaderValue})">
            <summary>
            Configures a collection of allowed content types which can be produced by the action.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ApiExplorerSettingsAttribute">
            <summary>
            Controls the visibility and group name for an <see cref="T:Microsoft.AspNet.Mvc.Description.ApiDescription"/> of the associated
            controller class or action method.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ApiExplorerSettingsAttribute.GroupName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.ApiExplorerSettingsAttribute.IgnoreApi">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Filters.DefaultGlobalFilterProvider">
            <summary>
            An implementation of <see cref="T:Microsoft.AspNet.Mvc.Filters.IGlobalFilterProvider"/> based on <see cref="T:Microsoft.AspNet.Mvc.MvcOptions"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Filters.DefaultGlobalFilterProvider.#ctor(Microsoft.Framework.OptionsModel.IOptions{Microsoft.AspNet.Mvc.MvcOptions})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.Filters.DefaultGlobalFilterProvider"/>.
            </summary>
            <param name="optionsAccessor">The options accessor for <see cref="T:Microsoft.AspNet.Mvc.MvcOptions"/>.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Filters.DefaultGlobalFilterProvider.Filters">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Filters.IGlobalFilterProvider">
            <summary>
            Provides access to the collection of <see cref="T:Microsoft.AspNet.Mvc.IFilter"/> for globally registered filters.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Filters.IGlobalFilterProvider.Filters">
            <summary>
            Gets the collection of <see cref="T:Microsoft.AspNet.Mvc.IFilter"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.FilterCollectionExtensions">
            <summary>
            Extension methods for adding filters to the global filters collection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FilterCollectionExtensions.Add(System.Collections.Generic.ICollection{Microsoft.AspNet.Mvc.IFilter},System.Type)">
            <summary>
            Adds a type representing an <see cref="T:Microsoft.AspNet.Mvc.IFilter"/> to a filter collection.
            </summary>
            <param name="filters">A collection of <see cref="T:Microsoft.AspNet.Mvc.IFilter"/>.</param>
            <param name="filterType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.IFilter"/>.</param>
            <returns>An <see cref="T:Microsoft.AspNet.Mvc.IFilter"/> representing the added type.</returns>
            <remarks>
            Filter instances will be created using <see cref="T:Microsoft.Framework.DependencyInjection.ITypeActivator"/>.
            Use <see cref="M:Microsoft.AspNet.Mvc.FilterCollectionExtensions.AddService(System.Collections.Generic.ICollection{Microsoft.AspNet.Mvc.IFilter},System.Type)"/> to register a service as a filter.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FilterCollectionExtensions.Add(System.Collections.Generic.ICollection{Microsoft.AspNet.Mvc.IFilter},System.Type,System.Int32)">
            <summary>
            Adds a type representing an <see cref="T:Microsoft.AspNet.Mvc.IFilter"/> to a filter collection.
            </summary>
            <param name="filters">A collection of <see cref="T:Microsoft.AspNet.Mvc.IFilter"/>.</param>
            <param name="filterType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.IFilter"/>.</param>
            <param name="order">The order of the added filter.</param>
            <returns>An <see cref="T:Microsoft.AspNet.Mvc.IFilter"/> representing the added type.</returns>
            <remarks>
            Filter instances will be created using <see cref="T:Microsoft.Framework.DependencyInjection.ITypeActivator"/>.
            Use <see cref="M:Microsoft.AspNet.Mvc.FilterCollectionExtensions.AddService(System.Collections.Generic.ICollection{Microsoft.AspNet.Mvc.IFilter},System.Type)"/> to register a service as a filter.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FilterCollectionExtensions.AddService(System.Collections.Generic.ICollection{Microsoft.AspNet.Mvc.IFilter},System.Type)">
            <summary>
            Adds a type representing an <see cref="T:Microsoft.AspNet.Mvc.IFilter"/> to a filter collection.
            </summary>
            <param name="filters">A collection of <see cref="T:Microsoft.AspNet.Mvc.IFilter"/>.</param>
            <param name="filterType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.IFilter"/>.</param>
            <returns>An <see cref="T:Microsoft.AspNet.Mvc.IFilter"/> representing the added service type.</returns>
            <remarks>
            Filter instances will created through dependency injection. Use 
            <see cref="M:Microsoft.AspNet.Mvc.FilterCollectionExtensions.AddService(System.Collections.Generic.ICollection{Microsoft.AspNet.Mvc.IFilter},System.Type)"/> to register a service that will be created via
            type activation.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FilterCollectionExtensions.AddService(System.Collections.Generic.ICollection{Microsoft.AspNet.Mvc.IFilter},System.Type,System.Int32)">
            <summary>
            Adds a type representing an <see cref="T:Microsoft.AspNet.Mvc.IFilter"/> to a filter collection.
            </summary>
            <param name="filters">A collection of <see cref="T:Microsoft.AspNet.Mvc.IFilter"/>.</param>
            <param name="filterType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.IFilter"/>.</param>
            <param name="order">The order of the added filter.</param>
            <returns>An <see cref="T:Microsoft.AspNet.Mvc.IFilter"/> representing the added service type.</returns>
            <remarks>
            Filter instances will created through dependency injection. Use 
            <see cref="M:Microsoft.AspNet.Mvc.FilterCollectionExtensions.AddService(System.Collections.Generic.ICollection{Microsoft.AspNet.Mvc.IFilter},System.Type)"/> to register a service that will be created via
            type activation.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.FilterDescriptor">
            <summary>
            Descriptor for an <see cref="T:Microsoft.AspNet.Mvc.IFilter"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.AspNet.Mvc.FilterDescriptor"/> describes an <see cref="T:Microsoft.AspNet.Mvc.IFilter"/> with an order and scope. 
            
            Order and scope control the execution order of filters. Filters with a higher value of Order execute
            later in the pipeline. 
            
            When filters have the same Order, the Scope value is used to determine the order of execution. Filters
            with a higher value of Scope execute later in the pipeline. See <see cref="T:Microsoft.AspNet.Mvc.FilterScope"/> for commonly
            used scopes.
            
            For <see cref="T:Microsoft.AspNet.Mvc.IExceptionFilter"/> implementions, the filter runs only after an exception has occurred,
            and so the observed order of execution will be opposite that of other filters.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FilterDescriptor.#ctor(Microsoft.AspNet.Mvc.IFilter,System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.FilterDescriptor"/>.
            </summary>
            <param name="filter">The <see cref="T:Microsoft.AspNet.Mvc.IFilter"/>.</param>
            <param name="filterScope">The filter scope.</param>
            <remarks>
            If the <paramref name="filter"/> implements <see cref="T:Microsoft.AspNet.Mvc.IOrderedFilter"/>, then the value of 
            <see cref="P:Microsoft.AspNet.Mvc.FilterDescriptor.Order"/> will be taken from <see cref="P:Microsoft.AspNet.Mvc.IOrderedFilter.Order"/>. Otherwise the value
            of <see cref="P:Microsoft.AspNet.Mvc.FilterDescriptor.Order"/> will default to <c>0</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.FilterDescriptor.Filter">
            <summary>
            The <see cref="T:Microsoft.AspNet.Mvc.IFilter"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.FilterDescriptor.Order">
            <summary>
            The filter order.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.FilterDescriptor.Scope">
            <summary>
            The filter scope.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.FilterScope">
            <summary>
            Contains constant values for known filter scopes. 
            
            Scope defines the ordering of filters that have the same order. Scope is by-default
            defined by how a filter is registered.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ProducesAttribute">
            <summary>
            Specifies the allowed content types and the type of the value returned by the action 
            which can be used to select a formatter while executing <see cref="T:Microsoft.AspNet.Mvc.ObjectResult"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultInputFormattersProvider">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultInputFormattersProvider.#ctor(Microsoft.Framework.OptionsModel.IOptions{Microsoft.AspNet.Mvc.MvcOptions},Microsoft.Framework.DependencyInjection.ITypeActivator,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the DefaultInputFormattersProvider class.
            </summary>
            <param name="options">An accessor to the <see cref="T:Microsoft.AspNet.Mvc.MvcOptions"/> configured for this application.</param>
            <param name="typeActivator">An <see cref="T:Microsoft.Framework.DependencyInjection.ITypeActivator"/> instance used to instantiate types.</param>
            <param name="serviceProvider">A <see cref="T:System.IServiceProvider"/> instance that retrieves services from the 
            service collection.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultInputFormattersProvider.InputFormatters">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultModelBindersProvider">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultModelBindersProvider.#ctor(Microsoft.Framework.OptionsModel.IOptions{Microsoft.AspNet.Mvc.MvcOptions},Microsoft.Framework.DependencyInjection.ITypeActivator,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the DefaultModelBindersProvider class.
            </summary>
            <param name="options">An accessor to the <see cref="T:Microsoft.AspNet.Mvc.MvcOptions"/> configured for this application.</param>
            <param name="typeActivator">An <see cref="T:Microsoft.Framework.DependencyInjection.ITypeActivator"/> instance used to instantiate types.</param>
            <param name="serviceProvider">A <see cref="T:System.IServiceProvider"/> instance that retrieves services from the 
            service collection.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultModelBindersProvider.ModelBinders">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultModelValidatorProviderProvider">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultModelValidatorProviderProvider.#ctor(Microsoft.Framework.OptionsModel.IOptions{Microsoft.AspNet.Mvc.MvcOptions},Microsoft.Framework.DependencyInjection.ITypeActivator,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultModelValidatorProviderProvider"/> class.
            </summary>
            <param name="options">An accessor to the <see cref="T:Microsoft.AspNet.Mvc.MvcOptions"/> configured for this application.</param>
            <param name="typeActivator">An <see cref="T:Microsoft.Framework.DependencyInjection.ITypeActivator"/> instance used to instantiate types.</param>
            <param name="serviceProvider">A <see cref="T:System.IServiceProvider"/> instance that retrieves services from the 
            service collection.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultModelValidatorProviderProvider.ModelValidatorProviders">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultValueProviderFactoryProvider">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultValueProviderFactoryProvider.#ctor(Microsoft.Framework.OptionsModel.IOptions{Microsoft.AspNet.Mvc.MvcOptions},Microsoft.Framework.DependencyInjection.ITypeActivator,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultValueProviderFactoryProvider"/> class.
            </summary>
            <param name="options">An accessor to the <see cref="T:Microsoft.AspNet.Mvc.MvcOptions"/> configured for this application.</param>
            <param name="typeActivator">An <see cref="T:Microsoft.Framework.DependencyInjection.ITypeActivator"/> instance used to instantiate types.</param>
            <param name="serviceProvider">A <see cref="T:System.IServiceProvider"/> instance that retrieves services from the 
            service collection.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultValueProviderFactoryProvider.ValueProviderFactories">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultViewEngineProvider">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultViewEngineProvider.#ctor(Microsoft.Framework.OptionsModel.IOptions{Microsoft.AspNet.Mvc.MvcOptions},Microsoft.Framework.DependencyInjection.ITypeActivator,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultViewEngineProvider"/> class.
            </summary>
            <param name="options">An accessor to the <see cref="T:Microsoft.AspNet.Mvc.MvcOptions"/> configured for this application.</param>
            <param name="typeActivator">An <see cref="T:Microsoft.Framework.DependencyInjection.ITypeActivator"/> instance used to instantiate types.</param>
            <param name="serviceProvider">A <see cref="T:System.IServiceProvider"/> instance that retrieves services from the 
            service collection.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OptionDescriptors.DefaultViewEngineProvider.ViewEngines">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OptionDescriptors.InputFormatterDescriptor">
            <summary>
            Encapsulates information that describes an <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.InputFormatterDescriptor.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.InputFormatterDescriptor"/>.
            </summary>
            <param name="type">A <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/> type that the descriptor represents.
            </param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.InputFormatterDescriptor.#ctor(Microsoft.AspNet.Mvc.IInputFormatter)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.InputFormatterDescriptor"/>.
            </summary>
            <param name="inputFormatter">An instance of <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/>
            that the descriptor represents.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelBinderDescriptor">
            <summary>
            Encapsulates information that describes an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelBinder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.ModelBinderDescriptor.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelBinderDescriptor"/>.
            </summary>
            <param name="type">A type that represents a <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelBinder"/>.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.ModelBinderDescriptor.#ctor(Microsoft.AspNet.Mvc.ModelBinding.IModelBinder)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelBinderDescriptor"/> with the specified instance.
            </summary>
            <param name="option">An instance of <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelBinder"/>.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor">
            <summary>
            Encapsulates information that describes an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelValidatorProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor"/>.
            </summary>
            <param name="type">A type that represents a <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelValidatorProvider"/>.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor.#ctor(Microsoft.AspNet.Mvc.ModelBinding.IModelValidatorProvider)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor"/> with the specified instance.
            </summary>
            <param name="option">An instance of <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelValidatorProvider"/>.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OptionDescriptors.OptionDescriptor`1">
            <summary>
            Encapsulates information that describes a <typeparamref name="TOption"/> option on <see cref="T:Microsoft.AspNet.Mvc.MvcOptions"/> .
            </summary>
            <typeparam name="TOption">The type of the option.</typeparam>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.OptionDescriptor`1.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.OptionDescriptor`1"/>.
            </summary>
            <param name="type">A type that represents <typeparamref name="TOption"/>.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.OptionDescriptor`1.#ctor(`0)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.OptionDescriptor`1"/> with the specified instance.
            </summary>
            <param name="option">An instance of <typeparamref name="TOption"/> that the descriptor represents.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OptionDescriptors.OptionDescriptor`1.OptionType">
            <summary>
            Gets the type of the <typeparamref name="TOption"/> described by this
            <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.OptionDescriptor`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OptionDescriptors.OptionDescriptor`1.Instance">
            <summary>
            Gets the instance of <typeparamref name="TOption"/> described by this
            <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.OptionDescriptor`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OptionDescriptors.OptionDescriptorBasedProvider`1">
            <summary>
            Provides a default implementation for instantiating options from a sequence of 
            <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.OptionDescriptor`1"/>.
            </summary>
            <typeparam name="TOption">The type of the option.</typeparam>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OptionDescriptors.OptionDescriptorBasedProvider`1.Options">
            <summary>
            Gets an activated sequence of <typeparamref name="TOption"/> instance.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OptionDescriptors.OutputFormatterDescriptor">
            <summary>
            Encapsulates information that describes an <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.OutputFormatterDescriptor.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.OutputFormatterDescriptor"/>.
            </summary>
            <param name="type">A <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/> type that the descriptor represents.
            </param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.OutputFormatterDescriptor.#ctor(Microsoft.AspNet.Mvc.IOutputFormatter)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.OutputFormatterDescriptor"/>.
            </summary>
            <param name="outputFormatter">An instance of <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/>
            that the descriptor represents.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OptionDescriptors.ValueProviderFactoryDescriptor">
            <summary>
            Encapsulates information that describes an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.ValueProviderFactoryDescriptor.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ValueProviderFactoryDescriptor"/>.
            </summary>
            <param name="type">The <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory"/> type that the descriptor represents.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.ValueProviderFactoryDescriptor.#ctor(Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ValueProviderFactoryDescriptor"/> using the specified type.
            </summary>
            <param name="valueProviderFactory">An instance of <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory"/> 
            that the descriptor represents.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OptionDescriptors.ViewEngineDescriptor">
            <summary>
            Encapsulates information that describes an <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.ViewEngineDescriptor.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ViewEngineDescriptor"/>.
            </summary>
            <param name="type">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/> type that the descriptor represents.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OptionDescriptors.ViewEngineDescriptor.#ctor(Microsoft.AspNet.Mvc.Rendering.IViewEngine)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ViewEngineDescriptor"/> using the specified type.
            </summary>
            <param name="viewEngine">An instance of <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/> that the descriptor represents.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.DefaultOutputFormattersProvider">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DefaultOutputFormattersProvider.#ctor(Microsoft.Framework.OptionsModel.IOptions{Microsoft.AspNet.Mvc.MvcOptions},Microsoft.Framework.DependencyInjection.ITypeActivator,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the DefaultOutputFormattersProvider class.
            </summary>
            <param name="options">An accessor to the <see cref="T:Microsoft.AspNet.Mvc.MvcOptions"/> configured for this application.</param>
            <param name="typeActivator">An <see cref="T:Microsoft.Framework.DependencyInjection.ITypeActivator"/> instance used to instantiate types.</param>
            <param name="serviceProvider">A <see cref="T:System.IServiceProvider"/> instance that retrieves services from the 
            service collection.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.DefaultOutputFormattersProvider.OutputFormatters">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.DelegatingStream">
            <summary>
            Stream that delegates to an inner stream.
            This Stream is present so that the inner stream is not closed
            even when Close() or Dispose() is called.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new <see cref="T:Microsoft.AspNet.Mvc.DelegatingStream"/>.
            </summary>
            <param name="innerStream">The stream which should not be closed or flushed.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.DelegatingStream.InnerStream">
            <summary>
            The inner stream this object delegates to.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.DelegatingStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.DelegatingStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.DelegatingStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.DelegatingStream.Length">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.DelegatingStream.Position">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.DelegatingStream.ReadTimeout">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.DelegatingStream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.DelegatingStream.WriteTimeout">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.EndRead(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.ReadByte">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.EndWrite(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.WriteByte(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.Close">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DelegatingStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.FormattingUtilities">
            <summary>
            Contains methods which are used by input formatters.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.FormattingUtilities.GetDefaultXmlReaderQuotas">
            <summary>
            Gets the default Reader Quotas for XmlReader.
            </summary>
            <returns>XmlReaderQuotas with default values</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.HttpNoContentOutputFormatter">
            <summary>
            Sets the status code to 204 if the content is null.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.HttpNoContentOutputFormatter.TreatNullValueAsNoContent">
            <summary>
            Indicates whether to select this formatter if the returned value from the action
            is null.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.HttpNotAcceptableOutputFormatter">
            <summary>
            A formatter which does not have a supported content type and selects itself if no content type is passed to it.
            Sets the status code to 406 if selected.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpNotAcceptableOutputFormatter.CanWriteResult(Microsoft.AspNet.Mvc.OutputFormatterContext,Microsoft.AspNet.Mvc.HeaderValueAbstractions.MediaTypeHeaderValue)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpNotAcceptableOutputFormatter.GetSupportedContentTypes(System.Type,System.Type,Microsoft.AspNet.Mvc.HeaderValueAbstractions.MediaTypeHeaderValue)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.HttpNotAcceptableOutputFormatter.WriteAsync(Microsoft.AspNet.Mvc.OutputFormatterContext)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IInputFormatter">
            <summary>
            Reads an object from the request body.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IInputFormatter.CanRead(Microsoft.AspNet.Mvc.InputFormatterContext)">
            <summary>
            Determines whether this <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/> can de-serialize
            an object of the specified type.
            </summary>
            <param name="context">Input formatter context associated with this call.</param>
            <returns>True if this <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/> supports the passed in 
            request's content-type and is able to de-serialize the request body.
            False otherwise.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IInputFormatter.ReadAsync(Microsoft.AspNet.Mvc.InputFormatterContext)">
            <summary>
            Called during deserialization to read an object from the request.
            </summary>
            <param name="context">Input formatter context associated with this call.</param>
            <returns>A task that deserializes the request body.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IInputFormattersProvider">
            <summary>
            Provides an activated collection of <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/> instances.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.IInputFormattersProvider.InputFormatters">
            <summary>
            Gets a collection of activated InputFormatter instances.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.InputFormatterContext">
            <summary>
            Represents information used by an input formatter for
            deserializing the request body into an object.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.InputFormatterContext.#ctor(Microsoft.AspNet.Mvc.ActionContext,System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.InputFormatterContext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.InputFormatterContext.ActionContext">
            <summary>
            Action context associated with the current call.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.InputFormatterContext.ModelType">
            <summary>
            Represents the expected type of the model represented by the request body.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IOutputFormatter">
            <summary>
            Writes an object to the output stream.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IOutputFormatter.GetSupportedContentTypes(System.Type,System.Type,Microsoft.AspNet.Mvc.HeaderValueAbstractions.MediaTypeHeaderValue)">
            <summary>
            Gets a filtered list of content types which are supported by this formatter 
            for the <paramref name="declaredType"/> and <paramref name="contentType"/>.
            </summary>
            <param name="declaredType">The declared type for which the supported content types are desired.</param>
            <param name="runtimeType">The runtime type for which the supported content types are desired.</param>
            <param name="contentType">
            The content type for which the supported content types are desired, or <c>null</c> if any content 
            type can be used.
            </param>
            <returns>Content types which are supported by this formatter.</returns>
            <remarks>
            If the value of <paramref name="contentType"/> is <c>null</c>, then the formatter should return a list
            of all content types that it can produce for the given data type. This may occur during content 
            negotiation when the HTTP Accept header is not specified, or when no match for the value in the Accept
            header can be found.
            
            If the value of <paramref name="contentType"/> is not <c>null</c>, then the formatter should return
            a list of all content types that it can produce which match the given data type and content type.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IOutputFormatter.CanWriteResult(Microsoft.AspNet.Mvc.OutputFormatterContext,Microsoft.AspNet.Mvc.HeaderValueAbstractions.MediaTypeHeaderValue)">
            <summary>
            Determines whether this <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/> can serialize
            an object of the specified type.
            </summary>
            <param name="context">The formatter context associated with the call.</param>
            <param name="contentType">The desired contentType on the response.</param>
            <returns>True if this <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/> supports the passed in 
            <paramref name="contentType"/> and is able to serialize the object
            represent by <paramref name="context"/>'s Object property.
            False otherwise.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IOutputFormatter.WriteAsync(Microsoft.AspNet.Mvc.OutputFormatterContext)">
            <summary>
            Writes the object represented by <paramref name="context"/>'s Object property.
            </summary>
            <param name="context">The formatter context associated with the call.</param>
            <returns>A Task that serializes the value to the <paramref name="context"/>'s response message.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IOutputFormattersProvider">
            <summary>
            Provides an activated collection of <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/> instances.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.IOutputFormattersProvider.OutputFormatters">
            <summary>
            Gets a collection of activated OutputFormatter instances.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.JsonInputFormatter.SupportedMediaTypes">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.JsonInputFormatter.SupportedEncodings">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.JsonInputFormatter.SerializerSettings">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to configure the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.JsonInputFormatter.CaptureDeserilizationErrors">
            <summary>
            Gets or sets if deserialization errors are captured. When set, these errors appear in 
            the <see cref="P:Microsoft.AspNet.Mvc.ActionContext.ModelState"/> instance of <see cref="T:Microsoft.AspNet.Mvc.InputFormatterContext"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.JsonInputFormatter.CanRead(Microsoft.AspNet.Mvc.InputFormatterContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.JsonInputFormatter.ReadAsync(Microsoft.AspNet.Mvc.InputFormatterContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.JsonInputFormatter.CreateJsonReader(Microsoft.AspNet.Mvc.InputFormatterContext,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Called during deserialization to get the <see cref="T:Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNet.Mvc.InputFormatterContext"/> for the read.</param>
            <param name="readStream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <param name="effectiveEncoding">The <see cref="T:System.Text.Encoding"/> to use when reading.</param>
            <returns>The <see cref="T:Newtonsoft.Json.JsonReader"/> used during deserialization.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.JsonInputFormatter.CreateJsonSerializer">
            <summary>
            Called during deserialization to get the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <returns>The <see cref="T:Newtonsoft.Json.JsonSerializer"/> used during serialization and deserialization.</returns>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.JsonOutputFormatter.SerializerSettings">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used to configure the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.MediaTypeWithQualityHeaderValueComparer">
            <summary>
            Implementation of <see cref="T:System.Collections.Generic.IComparer`1"/> that can compare accept media type header fields
            based on their quality values (a.k.a q-values).
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.MediaTypeWithQualityHeaderValueComparer.Compare(Microsoft.AspNet.Mvc.HeaderValueAbstractions.MediaTypeWithQualityHeaderValue,Microsoft.AspNet.Mvc.HeaderValueAbstractions.MediaTypeWithQualityHeaderValue)">
            <inheritdoc />
            <remarks>
            Performs comparisons based on the arguments' quality values
            (aka their "q-value"). Values with identical q-values are considered equal (i.e. the result is 0)
            with the exception that subtype wildcards are considered less than specific media types and full
            wildcards are considered less than subtype wildcards. This allows callers to sort a sequence of
            <see cref="T:Microsoft.AspNet.Mvc.HeaderValueAbstractions.MediaTypeWithQualityHeaderValue"/> following their q-values in the order of specific
            media types, subtype wildcards, and last any full wildcards.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OutputFormatter">
            <summary>
            Writes an object to the output stream.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OutputFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.OutputFormatter"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OutputFormatter.SupportedEncodings">
            <summary>
            Gets the mutable collection of character encodings supported by
            this <see cref="T:Microsoft.AspNet.Mvc.OutputFormatter"/>. The encodings are
            used when writing the data.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OutputFormatter.SupportedMediaTypes">
            <summary>
            Gets the mutable collection of <see cref="T:Microsoft.AspNet.Mvc.HeaderValueAbstractions.MediaTypeHeaderValue"/> elements supported by
            this <see cref="T:Microsoft.AspNet.Mvc.OutputFormatter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OutputFormatter.CanWriteType(System.Type,System.Type)">
            <summary>
            Returns a value indicating whether or not the given type can be written by this serializer.
            </summary>
            <param name="declaredType">The declared type.</param>
            <param name="runtimeType">The runtime type.</param>
            <returns><c>true</c> if the type can be written, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OutputFormatter.GetSupportedContentTypes(System.Type,System.Type,Microsoft.AspNet.Mvc.HeaderValueAbstractions.MediaTypeHeaderValue)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OutputFormatter.SelectCharacterEncoding(Microsoft.AspNet.Mvc.OutputFormatterContext)">
            <summary>
            Determines the best <see cref="T:System.Text.Encoding"/> amongst the supported encodings
            for reading or writing an HTTP entity body based on the provided <paramref name="contentTypeHeader"/>.
            </summary>
            <param name="context">The formatter context associated with the call.
            </param>
            <returns>The <see cref="T:System.Text.Encoding"/> to use when reading the request or writing the response.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OutputFormatter.CanWriteResult(Microsoft.AspNet.Mvc.OutputFormatterContext,Microsoft.AspNet.Mvc.HeaderValueAbstractions.MediaTypeHeaderValue)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OutputFormatter.WriteAsync(Microsoft.AspNet.Mvc.OutputFormatterContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OutputFormatter.WriteResponseHeaders(Microsoft.AspNet.Mvc.OutputFormatterContext)">
            <summary>
            Sets the headers on <see cref="T:Microsoft.AspNet.Http.HttpResponse"/> object.
            </summary>
            <param name="context">The formatter context associated with the call.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OutputFormatter.WriteResponseBodyAsync(Microsoft.AspNet.Mvc.OutputFormatterContext)">
            <summary>
            Writes the response body.
            </summary>
            <param name="context">The formatter context associated with the call.</param>
            <returns>A task which can write the response body.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OutputFormatterContext">
            <summary>
            Represents information used by a formatter for participating in 
            output content negotiation and in writing out the response. 
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OutputFormatterContext.Object">
            <summary>
            The return value of the action method. 
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OutputFormatterContext.DeclaredType">
            <summary>
            The declared return type of the action.  
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OutputFormatterContext.ActionContext">
            <summary>
            Action context associated with the current call. 
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OutputFormatterContext.SelectedEncoding">
            <summary>
            The encoding which is chosen by the selected formatter. 
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.OutputFormatterContext.SelectedContentType">
            <summary>
            The content type which is chosen by the selected formatter.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.StringWithQualityHeaderValueComparer">
            <summary>
            Implementation of <see cref="T:System.Collections.Generic.IComparer`1"/> that can compare content negotiation header fields
            based on their quality values (a.k.a q-values). This applies to values used in accept-charset, 
            accept-encoding, accept-language and related header fields with similar syntax rules. See 
            <see cref="T:Microsoft.AspNet.Mvc.MediaTypeWithQualityHeaderValueComparer"/> for a comparer for media type 
            q-values.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.StringWithQualityHeaderValueComparer.Compare(Microsoft.AspNet.Mvc.HeaderValueAbstractions.StringWithQualityHeaderValue,Microsoft.AspNet.Mvc.HeaderValueAbstractions.StringWithQualityHeaderValue)">
            <summary>
            Compares two <see cref="T:Microsoft.AspNet.Mvc.HeaderValueAbstractions.StringWithQualityHeaderValue"/> based on their quality value 
            (a.k.a their "q-value").
            Values with identical q-values are considered equal (i.e the result is 0) with the exception of wild-card
            values (i.e. a value of "*") which are considered less than non-wild-card values. This allows to sort
            a sequence of <see cref="T:Microsoft.AspNet.Mvc.HeaderValueAbstractions.StringWithQualityHeaderValue"/> following their q-values ending up with any
            wild-cards at the end.
            </summary>
            <param name="stringWithQuality1">The first value to compare.</param>
            <param name="stringWithQuality2">The second value to compare</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.TextPlainFormatter">
            <summary>
            Always writes a string value to the response, regardless of requested content type.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.XmlDataContractSerializerInputFormatter">
            <summary>
            This class handles deserialization of input XML data
            to strongly-typed objects using <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlDataContractSerializerInputFormatter.#ctor">
            <summary>
            Initializes a new instance of DataContractSerializerInputFormatter
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.XmlDataContractSerializerInputFormatter.SupportedMediaTypes">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.XmlDataContractSerializerInputFormatter.SupportedEncodings">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.XmlDataContractSerializerInputFormatter.MaxDepth">
            <summary>
            Indicates the acceptable input XML depth.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.XmlDataContractSerializerInputFormatter.XmlDictionaryReaderQuotas">
            <summary>
            The quotas include - DefaultMaxDepth, DefaultMaxStringContentLength, DefaultMaxArrayLength,
            DefaultMaxBytesPerRead, DefaultMaxNameTableCharCount
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlDataContractSerializerInputFormatter.CanRead(Microsoft.AspNet.Mvc.InputFormatterContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlDataContractSerializerInputFormatter.ReadAsync(Microsoft.AspNet.Mvc.InputFormatterContext)">
            <summary>
            Reads the input XML.
            </summary>
            <param name="context">The input formatter context which contains the body to be read.</param>
            <returns>Task which reads the input.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlDataContractSerializerInputFormatter.CreateXmlReader(System.IO.Stream)">
            <summary>
            Called during deserialization to get the <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="readStream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <returns>The <see cref="T:System.Xml.XmlReader"/> used during deserialization.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlDataContractSerializerInputFormatter.CreateDataContractSerializer(System.Type)">
            <summary>
            Called during deserialization to get the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/>.
            </summary>
            <returns>The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"/> used during deserialization.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.XmlDataContractSerializerOutputFormatter">
            <summary>
            This class handles serialization of objects
            to XML using <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlDataContractSerializerOutputFormatter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNet.Mvc.XmlDataContractSerializerOutputFormatter"/>
            with default XmlWriterSettings
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlDataContractSerializerOutputFormatter.#ctor(System.Xml.XmlWriterSettings)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNet.Mvc.XmlDataContractSerializerOutputFormatter"/>
            </summary>
            <param name="writerSettings">The settings to be used by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlDataContractSerializerOutputFormatter.CanWriteType(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlDataContractSerializerOutputFormatter.CreateSerializer(System.Type)">
            <summary>
            Create a new instance of <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> for the given object type.
            </summary>
            <param name="type">The type of object for which the serializer should be created.</param>
            <returns>A new instance of <see cref="T:System.Runtime.Serialization.DataContractSerializer"/></returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlDataContractSerializerOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNet.Mvc.OutputFormatterContext)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.XmlOutputFormatter">
            <summary>
            Abstract base class from which all XML Output Formatters derive from.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.XmlOutputFormatter.WriterSettings">
            <summary>
            Gets or sets the settings to be used by the XmlWriter.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlOutputFormatter.GetSerializableType(System.Type,System.Type)">
            <summary>
            Gets the type of the object to be serialized.
            </summary>
            <param name="declaredType">The declared type.</param>
            <param name="runtimeType">The runtime type.</param>
            <returns>The type of the object to be serialized.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlOutputFormatter.GetDefaultXmlWriterSettings">
            <summary>
            Gets the default XmlWriterSettings.
            </summary>
            <returns>Default <see cref="T:System.Xml.XmlWriterSettings"/></returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlOutputFormatter.CreateXmlWriter(System.IO.Stream,System.Xml.XmlWriterSettings)">
            <summary>
            Creates a new instance of <see cref="T:System.Xml.XmlWriter"/> using the given stream and the WriterSettings.
            </summary>
            <param name="writeStream">The stream on which the XmlWriter should operate on.</param>
            <returns>A new instance of <see cref="T:System.Xml.XmlWriter"/></returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.XmlSerializerInputFormatter">
            <summary>
            This class handles deserialization of input XML data
            to strongly-typed objects using <see cref="T:System.Xml.Serialization.XmlSerializer"/>
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlSerializerInputFormatter.#ctor">
            <summary>
            Initializes a new instance of XmlSerializerInputFormatter.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.XmlSerializerInputFormatter.SupportedMediaTypes">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.XmlSerializerInputFormatter.SupportedEncodings">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.XmlSerializerInputFormatter.MaxDepth">
            <summary>
            Indicates the acceptable input XML depth.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.XmlSerializerInputFormatter.XmlDictionaryReaderQuotas">
            <summary>
            The quotas include - DefaultMaxDepth, DefaultMaxStringContentLength, DefaultMaxArrayLength,
            DefaultMaxBytesPerRead, DefaultMaxNameTableCharCount
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlSerializerInputFormatter.CanRead(Microsoft.AspNet.Mvc.InputFormatterContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlSerializerInputFormatter.ReadAsync(Microsoft.AspNet.Mvc.InputFormatterContext)">
            <summary>
            Reads the input XML.
            </summary>
            <param name="context">The input formatter context which contains the body to be read.</param>
            <returns>Task which reads the input.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlSerializerInputFormatter.CreateXmlReader(System.IO.Stream)">
            <summary>
            Called during deserialization to get the <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="readStream">The <see cref="T:System.IO.Stream"/> from which to read.</param>
            <returns>The <see cref="T:System.Xml.XmlReader"/> used during deserialization.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlSerializerInputFormatter.CreateXmlSerializer(System.Type)">
            <summary>
            Called during deserialization to get the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <returns>The <see cref="T:System.Xml.Serialization.XmlSerializer"/> used during deserialization.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.XmlSerializerOutputFormatter">
            <summary>
            This class handles serialization of objects
            to XML using <see cref="T:System.Xml.Serialization.XmlSerializer"/>
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlSerializerOutputFormatter.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNet.Mvc.XmlSerializerOutputFormatter"/>
            with default XmlWriterSettings.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlSerializerOutputFormatter.#ctor(System.Xml.XmlWriterSettings)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNet.Mvc.XmlSerializerOutputFormatter"/>
            </summary>
            <param name="writerSettings">The settings to be used by the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlSerializerOutputFormatter.CanWriteType(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlSerializerOutputFormatter.CreateSerializer(System.Type)">
            <summary>
            Create a new instance of <see cref="T:System.Xml.Serialization.XmlSerializer"/> for the given object type.
            </summary>
            <param name="type">The type of object for which the serializer should be created.</param>
            <returns>A new instance of <see cref="T:System.Xml.Serialization.XmlSerializer"/></returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.XmlSerializerOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNet.Mvc.OutputFormatterContext)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Internal.MvcMarkerService">
            <summary>
            This is a Marker class which is used to determine if all the services were added
            to when Mvc is loaded.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Internal.MvcServicesHelper">
            <summary>
            Helper class which contains MvcServices related helpers.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Internal.MvcServicesHelper.ThrowIfMvcNotRegistered(System.IServiceProvider)">
            <summary>
            Throws InvalidOperationException when MvcMarkerService is not present
            in the list of services.
            </summary>
            <param name="services">The list of services.</param>
            <param name="serviceType">The type of service which needs to be searched for.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.TypeHelper.ObjectToDictionary(System.Object)">
             <summary>
             Given an object, adds each instance property with a public get method as a key and its
             associated value to a dictionary.
            
             If the object is already an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance, then a copy
             is returned.
             </summary>
             <remarks>
             The implementation of PropertyHelper will cache the property accessors per-type. This is
             faster when the the same type is used multiple times with ObjectToDictionary.
             </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Logging.AttributeRouteRouteAsyncValues">
            <summary>
            Represents the state of <see cref="M:Microsoft.AspNet.Mvc.Routing.AttributeRoute.RouteAsync(Microsoft.AspNet.Routing.RouteContext)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.AttributeRouteRouteAsyncValues.Name">
            <summary>
            The name of the state.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.AttributeRouteRouteAsyncValues.MatchingRoutes">
            <summary>
            The matching routes.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.AttributeRouteRouteAsyncValues.Handled">
            <summary>
            True if the request is handled.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.AttributeRouteRouteAsyncValues.Summary">
            <summary>
            A summary of the data for display.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Logging.AttributeRouteRouteAsyncValues.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Logging.DefaultActionSelectorSelectAsyncValues">
            <summary>
            Represents the state of <see cref="M:Microsoft.AspNet.Mvc.DefaultActionSelector.SelectAsync(Microsoft.AspNet.Routing.RouteContext)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.DefaultActionSelectorSelectAsyncValues.Name">
            <summary>
            The name of the state.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.DefaultActionSelectorSelectAsyncValues.ActionsMatchingRouteConstraints">
            <summary>
            The list of actions that matched all their route constraints, if any.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.DefaultActionSelectorSelectAsyncValues.ActionsMatchingActionConstraints">
            <summary>
            The list of actions that matched all their route constraints, and action constraints, if any.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.DefaultActionSelectorSelectAsyncValues.FinalMatches">
            <summary>
            The list of actions that are the best matches. These match all constraints and any additional criteria
            for disambiguation.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.DefaultActionSelectorSelectAsyncValues.SelectedAction">
            <summary>
            The selected action. Will be null if no matches are found or more than one match is found.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.DefaultActionSelectorSelectAsyncValues.Summary">
            <summary>
            A summary of the data for display.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Logging.DefaultActionSelectorSelectAsyncValues.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Logging.LogFormatter.Formatter(System.Object,System.Exception)">
            <summary>
            A formatter for use with <see cref="M:Microsoft.Framework.Logging.ILogger.Write(Microsoft.Framework.Logging.TraceType,System.Int32,System.Object,System.Exception,System.Func{System.Object,System.Exception,System.String})"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Logging.MvcRouteHandlerRouteAsyncValues">
            <summary>
            Represents the state of <see cref="M:Microsoft.AspNet.Mvc.MvcRouteHandler.RouteAsync(Microsoft.AspNet.Routing.RouteContext)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.MvcRouteHandlerRouteAsyncValues.Name">
            <summary>
            The name of the state.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.MvcRouteHandlerRouteAsyncValues.ActionSelected">
            <summary>
            True if an action was selected.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.MvcRouteHandlerRouteAsyncValues.ActionInvoked">
            <summary>
            True if the selected action was invoked.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.MvcRouteHandlerRouteAsyncValues.Handled">
            <summary>
            True if the request is handled.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Logging.MvcRouteHandlerRouteAsyncValues.Summary">
            <summary>
            A summary of the data for display.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Logging.MvcRouteHandlerRouteAsyncValues.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.BodyModelBinder">
            <summary>
            Represents a model binder which understands <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IFormatterBinderMetadata"/> and uses 
            InputFomatters to bind the model to request's body.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ExcludeFromValidationDelegateExtensions">
            <summary>
            Extensions for <see cref="P:Microsoft.AspNet.Mvc.MvcOptions.ExcludeFromValidationDelegates"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ExcludeFromValidationDelegateExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.ModelBinding.ExcludeFromValidationDelegate},System.Type)">
            <summary>
            Adds a delegate to the specified <paramref name="list" />
            that exludes the properties of the specified and it's derived types from validaton.
            </summary>
            <param name="list"><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ExcludeFromValidationDelegate"/>.</param>
            <param name="type"><see cref="T:System.Type"/> which should be excluded from validation.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.InputFormatterDescriptorExtensions">
            <summary>
            Extension methods for adding Input formatters to a collection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.InputFormatterDescriptorExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.InputFormatterDescriptor},System.Type)">
            <summary>
            Adds a type representing a <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of InputFormatterDescriptors</param>
            <param name="inputFormatterType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/>.</param>
            <returns>InputFormatterDescriptor representing the added instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.InputFormatterDescriptorExtensions.Insert(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.InputFormatterDescriptor},System.Int32,System.Type)">
            <summary>
            Inserts a type representing a <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of InputFormatterDescriptors</param>
            <param name="inputFormatterType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/>.</param>
            <returns>InputFormatterDescriptor representing the inserted instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.InputFormatterDescriptorExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.InputFormatterDescriptor},Microsoft.AspNet.Mvc.IInputFormatter)">
            <summary>
            Adds an <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of InputFormatterDescriptors</param>
            <param name="inputFormatter">An <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/> instance.</param>
            <returns>InputFormatterDescriptor representing the added instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.InputFormatterDescriptorExtensions.Insert(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.InputFormatterDescriptor},System.Int32,Microsoft.AspNet.Mvc.IInputFormatter)">
            <summary>
            Insert an <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of InputFormatterDescriptors</param>
            <param name="inputFormatter">An <see cref="T:Microsoft.AspNet.Mvc.IInputFormatter"/> instance.</param>
            <returns>InputFormatterDescriptor representing the added instance.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ModelBinderDescriptorExtensions">
            <summary>
            Extension methods for adding model binders to a collection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ModelBinderDescriptorExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ModelBinderDescriptor},System.Type)">
            <summary>
            Adds a type representing a <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelBinder"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of ModelBinderDescriptors</param>
            <param name="modelBinderType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelBinder"/>.</param>
            <returns>ModelBinderDescriptor representing the added instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ModelBinderDescriptorExtensions.Insert(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ModelBinderDescriptor},System.Int32,System.Type)">
            <summary>
            Inserts a type representing a <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelBinder"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of ModelBinderDescriptors</param>
            <param name="modelBinderType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelBinder"/>.</param>
            <returns>ModelBinderDescriptor representing the inserted instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ModelBinderDescriptorExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ModelBinderDescriptor},Microsoft.AspNet.Mvc.ModelBinding.IModelBinder)">
            <summary>
            Adds an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelBinder"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of ModelBinderDescriptors</param>
            <param name="modelBinder">An <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelBinder"/> instance.</param>
            <returns>ModelBinderDescriptor representing the added instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ModelBinderDescriptorExtensions.Insert(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ModelBinderDescriptor},System.Int32,Microsoft.AspNet.Mvc.ModelBinding.IModelBinder)">
            <summary>
            Insert an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelBinder"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of ModelBinderDescriptors</param>
            <param name="modelBinder">An <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelBinder"/> instance.</param>
            <returns>ModelBinderDescriptor representing the added instance.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ModelValidatorProviderDescriptorExtensions">
            <summary>
            Extension methods for adding validator provider to a collection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ModelValidatorProviderDescriptorExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor},System.Type)">
            <summary>
            Adds a type representing a <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelValidatorProvider"/> to <paramref name="descriptors"/>.
            </summary>
            <param name="descriptors">A list of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor"/>.</param>
            <param name="modelValidatorProviderType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelValidatorProvider"/></param>
            <returns>A <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor"/> representing the added instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ModelValidatorProviderDescriptorExtensions.Insert(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor},System.Int32,System.Type)">
            <summary>
            Inserts a type representing a <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelValidatorProvider"/> in to <paramref name="descriptors"/> at
            the specified <paramref name="index"/>.
            </summary>
            <param name="descriptors">A list of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor"/>.</param>
            <param name="index">The zero-based index at which <paramref name="modelValidatorProviderType"/> 
            should be inserted.</param>
            <param name="modelValidatorProviderType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelValidatorProvider"/></param>
            <returns>A <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor"/> representing the inserted instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ModelValidatorProviderDescriptorExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor},Microsoft.AspNet.Mvc.ModelBinding.IModelValidatorProvider)">
            <summary>
            Adds an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelValidatorProvider"/> to <paramref name="descriptors"/>.
            </summary>
            <param name="descriptors">A list of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor"/>.</param>
            <param name="modelValidatorProvider">An <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelBinder"/> instance.</param>
            <returns>A <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor"/> representing the added instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ModelValidatorProviderDescriptorExtensions.Insert(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor},System.Int32,Microsoft.AspNet.Mvc.ModelBinding.IModelValidatorProvider)">
            <summary>
            Insert an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelValidatorProvider"/> in to <paramref name="descriptors"/> at the specified
            <paramref name="index"/>.
            </summary>
            <param name="descriptors">A list of <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor"/>.</param>
            <param name="index">The zero-based index at which <paramref name="modelValidatorProvider"/> 
            should be inserted.</param>
            <param name="modelValidatorProvider">An <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IModelBinder"/> instance.</param>
            <returns>A <see cref="T:Microsoft.AspNet.Mvc.OptionDescriptors.ModelValidatorProviderDescriptor"/> representing the added instance.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.OutputFormatterDescriptorExtensions">
            <summary>
            Extension methods for adding output formatters to a collection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OutputFormatterDescriptorExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.OutputFormatterDescriptor},System.Type)">
            <summary>
            Adds a type representing a <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of OutputFormatterDescriptors</param>
            <param name="outputFormatterType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/>.</param>
            <returns>OutputFormatterDescriptor representing the added instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OutputFormatterDescriptorExtensions.Insert(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.OutputFormatterDescriptor},System.Int32,System.Type)">
            <summary>
            Inserts a type representing a <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of OutputFormatterDescriptors</param>
            <param name="outputFormatterType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/>.</param>
            <returns>OutputFormatterDescriptor representing the inserted instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OutputFormatterDescriptorExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.OutputFormatterDescriptor},Microsoft.AspNet.Mvc.IOutputFormatter)">
            <summary>
            Adds an <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of OutputFormatterDescriptors</param>
            <param name="outputFormatter">An <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/> instance.</param>
            <returns>OutputFormatterDescriptor representing the added instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.OutputFormatterDescriptorExtensions.Insert(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.OutputFormatterDescriptor},System.Int32,Microsoft.AspNet.Mvc.IOutputFormatter)">
            <summary>
            Insert an <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of OutputFormatterDescriptors</param>
            <param name="outputFormatter">An <see cref="T:Microsoft.AspNet.Mvc.IOutputFormatter"/> instance.</param>
            <returns>OutputFormatterDescriptor representing the added instance.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ValueProviderFactoryDescriptorExtensions">
            <summary>
            Extension methods for adding <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory"/> to a descriptor collection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ValueProviderFactoryDescriptorExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ValueProviderFactoryDescriptor},System.Type)">
            <summary>
            Adds a type representing a <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of ValueProviderFactoryDescriptors</param>
            <param name="valueProviderType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory"/>.</param>
            <returns>ValueProviderFactoryDescriptor representing the added instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ValueProviderFactoryDescriptorExtensions.Insert(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ValueProviderFactoryDescriptor},System.Int32,System.Type)">
            <summary>
            Inserts a type representing a <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of ValueProviderFactoryDescriptors</param>
            <param name="viewEngineType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory"/>.</param>
            <returns>ValueProviderFactoryDescriptor representing the inserted instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ValueProviderFactoryDescriptorExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ValueProviderFactoryDescriptor},Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory)">
            <summary>
            Adds an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of ValueProviderFactoryDescriptors</param>
            <param name="valueProviderFactory">An <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory"/> instance.</param>
            <returns>ValueProviderFactoryDescriptor representing the added instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ValueProviderFactoryDescriptorExtensions.Insert(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ValueProviderFactoryDescriptor},System.Int32,Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory)">
            <summary>
            Insert an <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of ValueProviderFactoryDescriptors</param>
            <param name="valueProviderFactory">An <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.IValueProviderFactory"/> instance.</param>
            <returns>ValueProviderFactoryDescriptor representing the added instance.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ViewEngineDescriptorExtensions">
            <summary>
            Extension methods for adding view engines to a descriptor collection.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ViewEngineDescriptorExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ViewEngineDescriptor},System.Type)">
            <summary>
            Adds a type representing a <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of ViewEngineDescriptors</param>
            <param name="viewEngineType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/>.</param>
            <returns>ViewEngineDescriptor representing the added instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ViewEngineDescriptorExtensions.Insert(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ViewEngineDescriptor},System.Int32,System.Type)">
            <summary>
            Inserts a type representing a <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of ViewEngineDescriptors</param>
            <param name="viewEngineType">Type representing an <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/>.</param>
            <returns>ViewEngineDescriptor representing the inserted instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ViewEngineDescriptorExtensions.Add(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ViewEngineDescriptor},Microsoft.AspNet.Mvc.Rendering.IViewEngine)">
            <summary>
            Adds an <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of ViewEngineDescriptors</param>
            <param name="viewEngine">An <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/> instance.</param>
            <returns>ViewEngineDescriptor representing the added instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ViewEngineDescriptorExtensions.Insert(System.Collections.Generic.IList{Microsoft.AspNet.Mvc.OptionDescriptors.ViewEngineDescriptor},System.Int32,Microsoft.AspNet.Mvc.Rendering.IViewEngine)">
            <summary>
            Insert an <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/> to a descriptor collection.
            </summary>
            <param name="descriptors">A list of ViewEngineDescriptors</param>
            <param name="viewEngine">An <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/> instance.</param>
            <returns>ViewEngineDescriptor representing the added instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ModelBindingHelper.TryUpdateModelAsync``1(``0,System.String,Microsoft.AspNet.Http.HttpContext,Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary,Microsoft.AspNet.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNet.Mvc.ModelBinding.IModelBinder,Microsoft.AspNet.Mvc.ModelBinding.IValueProvider,Microsoft.AspNet.Mvc.ModelBinding.IModelValidatorProvider)">
            <summary>
            Updates the specified model instance using the specified binder and value provider and 
            executes validation using the specified sequence of validator providers.
            </summary>
            <typeparam name="TModel">The type of the model object.</typeparam>
            <param name="model">The model instance to update.</param>
            <param name="prefix">The prefix to use when looking up values in the value provider.</param>
            <param name="httpContext">The context for the current executing request.</param>
            <param name="modelState">The ModelStateDictionary used for maintaining state and 
            results of model-binding validation.</param>
            <param name="metadataProvider">The provider used for reading metadata for the model type.</param>
            <param name="modelBinder">The model binder used for binding.</param>
            <param name="valueProvider">The value provider used for looking up values.</param>
            <param name="validatorProvider">The validator provider used for executing validation on the model
            instance.</param>
            <returns>A Task with a value representing if the the update is successful.</returns>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.MultipleBodyParametersAreNotAllowed">
            <summary>
            More than one parameter is bound to the HTTP request's content.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatMultipleBodyParametersAreNotAllowed">
            <summary>
            More than one parameter is bound to the HTTP request's content.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AntiForgeryToken_AdditionalDataCheckFailed">
            <summary>
            The provided anti-forgery token failed a custom data check.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAntiForgeryToken_AdditionalDataCheckFailed">
            <summary>
            The provided anti-forgery token failed a custom data check.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AntiForgeryToken_ClaimUidMismatch">
            <summary>
            The provided anti-forgery token was meant for a different claims-based user than the current user.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAntiForgeryToken_ClaimUidMismatch">
            <summary>
            The provided anti-forgery token was meant for a different claims-based user than the current user.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AntiForgeryToken_CookieMissing">
            <summary>
            The required anti-forgery cookie "{0}" is not present.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAntiForgeryToken_CookieMissing(System.Object)">
            <summary>
            The required anti-forgery cookie "{0}" is not present.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AntiForgeryToken_DeserializationFailed">
            <summary>
            The anti-forgery token could not be decrypted.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAntiForgeryToken_DeserializationFailed">
            <summary>
            The anti-forgery token could not be decrypted.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AntiForgeryToken_FormFieldMissing">
            <summary>
            The required anti-forgery form field "{0}" is not present.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAntiForgeryToken_FormFieldMissing(System.Object)">
            <summary>
            The required anti-forgery form field "{0}" is not present.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AntiForgeryToken_SecurityTokenMismatch">
            <summary>
            The anti-forgery cookie token and form field token do not match.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAntiForgeryToken_SecurityTokenMismatch">
            <summary>
            The anti-forgery cookie token and form field token do not match.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AntiForgeryToken_TokensSwapped">
            <summary>
            Validation of the provided anti-forgery token failed. The cookie "{0}" and the form field "{1}" were swapped.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAntiForgeryToken_TokensSwapped(System.Object,System.Object)">
            <summary>
            Validation of the provided anti-forgery token failed. The cookie "{0}" and the form field "{1}" were swapped.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AntiForgeryToken_UsernameMismatch">
            <summary>
            The provided anti-forgery token was meant for user "{0}", but the current user is "{1}".
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAntiForgeryToken_UsernameMismatch(System.Object,System.Object)">
            <summary>
            The provided anti-forgery token was meant for user "{0}", but the current user is "{1}".
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AntiForgeryWorker_RequireSSL">
            <summary>
            The anti-forgery system has the configuration value AntiForgeryOptions.RequireSsl = true, but the current request is not an SSL request.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAntiForgeryWorker_RequireSSL">
            <summary>
            The anti-forgery system has the configuration value AntiForgeryOptions.RequireSsl = true, but the current request is not an SSL request.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ActionExecutor_WrappedTaskInstance">
            <summary>
            The method '{0}' on type '{1}' returned an instance of '{2}'. Make sure to call Unwrap on the returned value to avoid unobserved faulted Task.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatActionExecutor_WrappedTaskInstance(System.Object,System.Object,System.Object)">
            <summary>
            The method '{0}' on type '{1}' returned an instance of '{2}'. Make sure to call Unwrap on the returned value to avoid unobserved faulted Task.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ActionExecutor_UnexpectedTaskInstance">
            <summary>
            The method '{0}' on type '{1}' returned a Task instance even though it is not an asynchronous method.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatActionExecutor_UnexpectedTaskInstance(System.Object,System.Object)">
            <summary>
            The method '{0}' on type '{1}' returned a Task instance even though it is not an asynchronous method.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ClaimUidExtractor_ClaimNotPresent">
            <summary>
            A claim of type '{0}' was not present on the provided ClaimsIdentity.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatClaimUidExtractor_ClaimNotPresent(System.Object)">
            <summary>
            A claim of type '{0}' was not present on the provided ClaimsIdentity.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.TokenValidator_AuthenticatedUserWithoutUsername">
            <summary>
            The provided identity of type '{0}' is marked IsAuthenticated = true but does not have a value for Name. By default, the anti-forgery system requires that all authenticated identities have a unique Name. If it is not possible to provide a unique Name for this identity, consider extending IAdditionalDataProvider by overriding the DefaultAdditionalDataProvider or a custom type that can provide some form of unique identifier for the current user.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatTokenValidator_AuthenticatedUserWithoutUsername(System.Object)">
            <summary>
            The provided identity of type '{0}' is marked IsAuthenticated = true but does not have a value for Name. By default, the anti-forgery system requires that all authenticated identities have a unique Name. If it is not possible to provide a unique Name for this identity, consider extending IAdditionalDataProvider by overriding the DefaultAdditionalDataProvider or a custom type that can provide some form of unique identifier for the current user.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ReflectedActionFilterEndPoint_UnexpectedActionDescriptor">
            <summary>
            The class ReflectedActionFilterEndPoint only supports ReflectedActionDescriptors.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatReflectedActionFilterEndPoint_UnexpectedActionDescriptor">
            <summary>
            The class ReflectedActionFilterEndPoint only supports ReflectedActionDescriptors.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ViewComponent_AmbiguousTypeMatch">
            <summary>
            The view component name '{0}' matched multiple types: {1}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatViewComponent_AmbiguousTypeMatch(System.Object,System.Object)">
            <summary>
            The view component name '{0}' matched multiple types: {1}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ViewComponent_AsyncMethod_ShouldReturnTask">
            <summary>
            The async view component method '{0}' should be declared to return Task&lt;T&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatViewComponent_AsyncMethod_ShouldReturnTask(System.Object)">
            <summary>
            The async view component method '{0}' should be declared to return Task&lt;T&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ViewComponent_MustReturnValue">
            <summary>
            A view component must return a non-null value.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatViewComponent_MustReturnValue">
            <summary>
            A view component must return a non-null value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ViewComponent_SyncMethod_ShouldReturnValue">
            <summary>
            The view component method '{0}' should be declared to return a value.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatViewComponent_SyncMethod_ShouldReturnValue(System.Object)">
            <summary>
            The view component method '{0}' should be declared to return a value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ViewComponent_CannotFindComponent">
            <summary>
            A view component named '{0}' could not be found.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatViewComponent_CannotFindComponent(System.Object)">
            <summary>
            A view component named '{0}' could not be found.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ViewComponent_IViewComponentFactory_ReturnedNull">
            <summary>
            An invoker could not be created for the view component '{0}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatViewComponent_IViewComponentFactory_ReturnedNull(System.Object)">
            <summary>
            An invoker could not be created for the view component '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ViewComponent_CannotFindMethod">
            <summary>
            Could not find an '{0}' method matching the parameters.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatViewComponent_CannotFindMethod(System.Object)">
            <summary>
            Could not find an '{0}' method matching the parameters.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ViewComponent_CannotFindMethod_WithFallback">
            <summary>
            Could not find an '{0}' or '{1}' method matching the parameters.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatViewComponent_CannotFindMethod_WithFallback(System.Object,System.Object)">
            <summary>
            Could not find an '{0}' or '{1}' method matching the parameters.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ViewComponent_InvalidReturnValue">
            <summary>
            View components only support returning {0}, {1} or {2}.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatViewComponent_InvalidReturnValue(System.Object,System.Object,System.Object)">
            <summary>
            View components only support returning {0}, {1} or {2}.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ActionContextAccessor_SetValueNotSupported">
            <summary>
            Replacing the action context is not supported.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatActionContextAccessor_SetValueNotSupported">
            <summary>
            Replacing the action context is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ActionInvokerFactory_CouldNotCreateInvoker">
            <summary>
            An action invoker could not be created for action '{0}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatActionInvokerFactory_CouldNotCreateInvoker(System.Object)">
            <summary>
            An action invoker could not be created for action '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ActionDescriptorMustBeBasedOnControllerAction">
            <summary>
            The action descriptor must be of type '{0}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatActionDescriptorMustBeBasedOnControllerAction(System.Object)">
            <summary>
            The action descriptor must be of type '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ArgumentCannotBeNullOrEmpty">
            <summary>
            Value cannot be null or empty.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatArgumentCannotBeNullOrEmpty">
            <summary>
            Value cannot be null or empty.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.PropertyOfTypeCannotBeNull">
            <summary>
            The '{0}' property of '{1}' must not be null.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatPropertyOfTypeCannotBeNull(System.Object,System.Object)">
            <summary>
            The '{0}' property of '{1}' must not be null.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.TypeMethodMustReturnNotNullValue">
            <summary>
            The '{0}' method of type '{1}' cannot return a null value.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatTypeMethodMustReturnNotNullValue(System.Object,System.Object)">
            <summary>
            The '{0}' method of type '{1}' cannot return a null value.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ActionSelector_GetCandidateActionsIsAmbiguous">
            <summary>
            The supplied route values are ambiguous and can select multiple sets of actions.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatActionSelector_GetCandidateActionsIsAmbiguous">
            <summary>
            The supplied route values are ambiguous and can select multiple sets of actions.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ArgumentPropertyUnexpectedType">
            <summary>
            Property '{0}' is of type '{1}', but this method requires a value of type '{2}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatArgumentPropertyUnexpectedType(System.Object,System.Object,System.Object)">
            <summary>
            Property '{0}' is of type '{1}', but this method requires a value of type '{2}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.Common_PartialViewNotFound">
            <summary>
            The partial view '{0}' was not found or no view engine supports the searched locations. The following locations were searched:{1}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatCommon_PartialViewNotFound(System.Object,System.Object)">
            <summary>
            The partial view '{0}' was not found or no view engine supports the searched locations. The following locations were searched:{1}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.Common_ValueNotValidForProperty">
            <summary>
            The value '{0}' is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatCommon_ValueNotValidForProperty(System.Object)">
            <summary>
            The value '{0}' is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.Common_TriState_False">
            <summary>
            False
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatCommon_TriState_False">
            <summary>
            False
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.Common_TriState_NotSet">
            <summary>
            Not Set
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatCommon_TriState_NotSet">
            <summary>
            Not Set
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.Common_TriState_True">
            <summary>
            True
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatCommon_TriState_True">
            <summary>
            True
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.DynamicViewData_ViewDataNull">
            <summary>
            ViewData value must not be null.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatDynamicViewData_ViewDataNull">
            <summary>
            ViewData value must not be null.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ExpressionHelper_InvalidIndexerExpression">
            <summary>
            The expression compiler was unable to evaluate the indexer expression '{0}' because it references the model parameter '{1}' which is unavailable.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatExpressionHelper_InvalidIndexerExpression(System.Object,System.Object)">
            <summary>
            The expression compiler was unable to evaluate the indexer expression '{0}' because it references the model parameter '{1}' which is unavailable.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.HtmlHelper_NullModelMetadata">
            <summary>
            The IModelMetadataProvider was unable to provide metadata for expression '{0}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatHtmlHelper_NullModelMetadata(System.Object)">
            <summary>
            The IModelMetadataProvider was unable to provide metadata for expression '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.HtmlHelper_NotContextualized">
            <summary>
            Must call 'Contextualize' method before using this HtmlHelper instance.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatHtmlHelper_NotContextualized">
            <summary>
            Must call 'Contextualize' method before using this HtmlHelper instance.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.HtmlHelper_MissingSelectData">
            <summary>
            There is no ViewData item of type '{0}' that has the key '{1}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatHtmlHelper_MissingSelectData(System.Object,System.Object)">
            <summary>
            There is no ViewData item of type '{0}' that has the key '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.HtmlHelper_SelectExpressionNotEnumerable">
            <summary>
            The parameter '{0}' must evaluate to an IEnumerable when multiple selection is allowed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatHtmlHelper_SelectExpressionNotEnumerable(System.Object)">
            <summary>
            The parameter '{0}' must evaluate to an IEnumerable when multiple selection is allowed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.HtmlHelper_WrongSelectDataType">
            <summary>
            The ViewData item that has the key '{0}' is of type '{1}' but must be of type '{2}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatHtmlHelper_WrongSelectDataType(System.Object,System.Object,System.Object)">
            <summary>
            The ViewData item that has the key '{0}' is of type '{1}' but must be of type '{2}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.Templates_TypeMustImplementIEnumerable">
            <summary>
            The '{0}' template was used with an object of type '{1}', which does not implement '{2}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatTemplates_TypeMustImplementIEnumerable(System.Object,System.Object,System.Object)">
            <summary>
            The '{0}' template was used with an object of type '{1}', which does not implement '{2}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.TemplateHelpers_TemplateLimitations">
            <summary>
            Templates can be used only with field access, property access, single-dimension array index, or single-parameter custom indexer expressions.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatTemplateHelpers_TemplateLimitations">
            <summary>
            Templates can be used only with field access, property access, single-dimension array index, or single-parameter custom indexer expressions.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.TemplateHelpers_NoTemplate">
            <summary>
            Unable to locate an appropriate template for type {0}.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatTemplateHelpers_NoTemplate(System.Object)">
            <summary>
            Unable to locate an appropriate template for type {0}.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ViewData_ModelCannotBeNull">
            <summary>
            The model item passed is null, but this ViewDataDictionary instance requires a non-null model item of type '{0}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatViewData_ModelCannotBeNull(System.Object)">
            <summary>
            The model item passed is null, but this ViewDataDictionary instance requires a non-null model item of type '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ViewData_WrongTModelType">
            <summary>
            The model item passed into the ViewDataDictionary is of type '{0}', but this ViewDataDictionary instance requires a model item of type '{1}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatViewData_WrongTModelType(System.Object,System.Object)">
            <summary>
            The model item passed into the ViewDataDictionary is of type '{0}', but this ViewDataDictionary instance requires a model item of type '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.NoRoutesMatched">
            <summary>
            No route matches the supplied values.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatNoRoutesMatched">
            <summary>
            No route matches the supplied values.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AsyncActionFilter_InvalidShortCircuit">
            <summary>
            If an {0} provides a result value by setting the {1} property of {2} to a non-null value, then it cannot call the next filter by invoking {3}.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAsyncActionFilter_InvalidShortCircuit(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            If an {0} provides a result value by setting the {1} property of {2} to a non-null value, then it cannot call the next filter by invoking {3}.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AsyncResultFilter_InvalidShortCircuit">
            <summary>
            If an {0} cancels execution by setting the {1} property of {2} to 'true', then it cannot call the next filter by invoking {3}.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAsyncResultFilter_InvalidShortCircuit(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            If an {0} cancels execution by setting the {1} property of {2} to 'true', then it cannot call the next filter by invoking {3}.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ViewEngine_PartialViewNotFound">
            <summary>
            The partial view '{0}' was not found. The following locations were searched:{1}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatViewEngine_PartialViewNotFound(System.Object,System.Object)">
            <summary>
            The partial view '{0}' was not found. The following locations were searched:{1}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ViewEngine_ViewNotFound">
            <summary>
            The view '{0}' was not found. The following locations were searched:{1}.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatViewEngine_ViewNotFound(System.Object,System.Object)">
            <summary>
            The view '{0}' was not found. The following locations were searched:{1}.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AuthorizeAttribute_AuthorizationServiceMustBeDefined">
            <summary>
            Unable to locate an implementation of IAuthorizationService.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAuthorizeAttribute_AuthorizationServiceMustBeDefined">
            <summary>
            Unable to locate an implementation of IAuthorizationService.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AuthorizeAttribute_OnAuthorizationNotImplemented">
            <summary>
            OnAuthorization is not implemented by this filter, use OnAuthorizationAsync instead.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAuthorizeAttribute_OnAuthorizationNotImplemented">
            <summary>
            OnAuthorization is not implemented by this filter, use OnAuthorizationAsync instead.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.HtmlHelper_TextAreaParameterOutOfRange">
            <summary>
            The value must be greater than or equal to zero.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatHtmlHelper_TextAreaParameterOutOfRange">
            <summary>
            The value must be greater than or equal to zero.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.FilterFactoryAttribute_TypeMustImplementIFilter">
            <summary>
            The type provided to '{0}' must implement '{1}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatFilterFactoryAttribute_TypeMustImplementIFilter(System.Object,System.Object)">
            <summary>
            The type provided to '{0}' must implement '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.UnobtrusiveJavascript_ValidationParameterCannotBeEmpty">
            <summary>
            Validation parameter names in unobtrusive client validation rules cannot be empty. Client rule type: {0}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatUnobtrusiveJavascript_ValidationParameterCannotBeEmpty(System.Object)">
            <summary>
            Validation parameter names in unobtrusive client validation rules cannot be empty. Client rule type: {0}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.UnobtrusiveJavascript_ValidationParameterMustBeLegal">
            <summary>
            Validation parameter names in unobtrusive client validation rules must start with a lowercase letter and consist of only lowercase letters or digits. Validation parameter name: {0}, client rule type: {1}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatUnobtrusiveJavascript_ValidationParameterMustBeLegal(System.Object,System.Object)">
            <summary>
            Validation parameter names in unobtrusive client validation rules must start with a lowercase letter and consist of only lowercase letters or digits. Validation parameter name: {0}, client rule type: {1}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.UnobtrusiveJavascript_ValidationTypeCannotBeEmpty">
            <summary>
            Validation type names in unobtrusive client validation rules cannot be empty. Client rule type: {0}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatUnobtrusiveJavascript_ValidationTypeCannotBeEmpty(System.Object)">
            <summary>
            Validation type names in unobtrusive client validation rules cannot be empty. Client rule type: {0}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.UnobtrusiveJavascript_ValidationTypeMustBeLegal">
            <summary>
            Validation type names in unobtrusive client validation rules must consist of only lowercase letters. Invalid name: "{0}", client rule type: {1}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatUnobtrusiveJavascript_ValidationTypeMustBeLegal(System.Object,System.Object)">
            <summary>
            Validation type names in unobtrusive client validation rules must consist of only lowercase letters. Invalid name: "{0}", client rule type: {1}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.UnobtrusiveJavascript_ValidationTypeMustBeUnique">
            <summary>
            Validation type names in unobtrusive client validation rules must be unique. The following validation type was seen more than once: {0}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatUnobtrusiveJavascript_ValidationTypeMustBeUnique(System.Object)">
            <summary>
            Validation type names in unobtrusive client validation rules must be unique. The following validation type was seen more than once: {0}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ActionResult_ActionReturnValueCannotBeNull">
            <summary>
            Cannot return null from an action method with a return type of '{0}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatActionResult_ActionReturnValueCannotBeNull(System.Object)">
            <summary>
            Cannot return null from an action method with a return type of '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.ValueTypesCannotBeActivated">
            <summary>
            Value types cannot be activated by '{0}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatValueTypesCannotBeActivated(System.Object)">
            <summary>
            Value types cannot be activated by '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.TypeMustDeriveFromType">
            <summary>
            The type '{0}' must derive from '{1}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatTypeMustDeriveFromType(System.Object,System.Object)">
            <summary>
            The type '{0}' must derive from '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.OutputFormatterNoEncoding">
            <summary>
            No encoding found for output formatter '{0}'. There must be at least one supported encoding registered in order for the output formatter to write content.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatOutputFormatterNoEncoding(System.Object)">
            <summary>
            No encoding found for output formatter '{0}'. There must be at least one supported encoding registered in order for the output formatter to write content.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.InputFormatterNoEncoding">
            <summary>
            No encoding found for input formatter '{0}'. There must be at least one supported encoding registered in order for the formatter to read content.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatInputFormatterNoEncoding(System.Object)">
            <summary>
            No encoding found for input formatter '{0}'. There must be at least one supported encoding registered in order for the formatter to read content.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.UnsupportedContentType">
            <summary>
            Unsupported content type '{0}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatUnsupportedContentType(System.Object)">
            <summary>
            Unsupported content type '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.OutputFormatterNoMediaType">
            <summary>
            No supported media type registered for output formatter '{0}'. There must be at least one supported media type registered in order for the output formatter to write content.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatOutputFormatterNoMediaType(System.Object)">
            <summary>
            No supported media type registered for output formatter '{0}'. There must be at least one supported media type registered in order for the output formatter to write content.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_AggregateErrorMessage">
            <summary>
            The following errors occurred with attribute routing information:{0}{0}{1}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_AggregateErrorMessage(System.Object,System.Object)">
            <summary>
            The following errors occurred with attribute routing information:{0}{0}{1}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_CannotContainParameter">
            <summary>
            The attribute route '{0}' cannot contain a parameter named '{{{1}}}'. Use '[{1}]' in the route template to insert the value '{2}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_CannotContainParameter(System.Object,System.Object,System.Object)">
            <summary>
            The attribute route '{0}' cannot contain a parameter named '{{{1}}}'. Use '[{1}]' in the route template to insert the value '{2}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_IndividualErrorMessage">
            <summary>
            For action: '{0}'{1}Error: {2}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_IndividualErrorMessage(System.Object,System.Object,System.Object)">
            <summary>
            For action: '{0}'{1}Error: {2}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_TokenReplacement_EmptyTokenNotAllowed">
            <summary>
            An empty replacement token ('[]') is not allowed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_TokenReplacement_EmptyTokenNotAllowed">
            <summary>
            An empty replacement token ('[]') is not allowed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_TokenReplacement_ImbalancedSquareBrackets">
            <summary>
            Token delimiters ('[', ']') are imbalanced.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_TokenReplacement_ImbalancedSquareBrackets">
            <summary>
            Token delimiters ('[', ']') are imbalanced.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_TokenReplacement_InvalidSyntax">
            <summary>
            The route template '{0}' has invalid syntax. {1}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_TokenReplacement_InvalidSyntax(System.Object,System.Object)">
            <summary>
            The route template '{0}' has invalid syntax. {1}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_TokenReplacement_ReplacementValueNotFound">
            <summary>
            While processing template '{0}', a replacement value for the token '{1}' could not be found. Available tokens: '{2}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_TokenReplacement_ReplacementValueNotFound(System.Object,System.Object,System.Object)">
            <summary>
            While processing template '{0}', a replacement value for the token '{1}' could not be found. Available tokens: '{2}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_TokenReplacement_UnclosedToken">
            <summary>
            A replacement token is not closed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_TokenReplacement_UnclosedToken">
            <summary>
            A replacement token is not closed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_TokenReplacement_UnescapedBraceInToken">
            <summary>
            An unescaped '[' token is not allowed inside of a replacement token. Use '[[' to escape.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_TokenReplacement_UnescapedBraceInToken">
            <summary>
            An unescaped '[' token is not allowed inside of a replacement token. Use '[[' to escape.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.RouteConstraintAttribute_InvalidKeyHandlingValue">
            <summary>
            The value must be either '{0}' or '{1}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatRouteConstraintAttribute_InvalidKeyHandlingValue(System.Object,System.Object)">
            <summary>
            The value must be either '{0}' or '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.UnableToFindServices">
            <summary>
            Unable to find the required services. Please add all the required services by calling '{0}' inside the call to '{1}' or '{2}' in the application startup code.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatUnableToFindServices(System.Object,System.Object,System.Object)">
            <summary>
            Unable to find the required services. Please add all the required services by calling '{0}' inside the call to '{1}' or '{2}' in the application startup code.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_DifferentLinkGenerationEntries_SameName">
            <summary>
            Two or more routes named '{0}' have different templates.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_DifferentLinkGenerationEntries_SameName(System.Object)">
            <summary>
            Two or more routes named '{0}' have different templates.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_DuplicateNames_Item">
            <summary>
            Action: '{0}' - Template: '{1}'
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_DuplicateNames_Item(System.Object,System.Object)">
            <summary>
            Action: '{0}' - Template: '{1}'
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_DuplicateNames">
            <summary>
            Attribute routes with the same name '{0}' must have the same template:{1}{2}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_DuplicateNames(System.Object,System.Object,System.Object)">
            <summary>
            Attribute routes with the same name '{0}' must have the same template:{1}{2}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_AggregateErrorMessage_ErrorNumber">
            <summary>
            Error {0}:{1}{2}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_AggregateErrorMessage_ErrorNumber(System.Object,System.Object,System.Object)">
            <summary>
            Error {0}:{1}{2}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.TemplatedViewLocationExpander_NoReplacementToken">
            <summary>
            Could not find a replacement for view expansion token '{0}'.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatTemplatedViewLocationExpander_NoReplacementToken(System.Object)">
            <summary>
            Could not find a replacement for view expansion token '{0}'.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.TemplatedExpander_PopulateValuesMustBeInvokedFirst">
            <summary>
            {0} must be executed before {1} can be invoked.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatTemplatedExpander_PopulateValuesMustBeInvokedFirst(System.Object,System.Object)">
            <summary>
            {0} must be executed before {1} can be invoked.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.TemplatedExpander_ValueFactoryCannotReturnNull">
            <summary>
            The result of value factory cannot be null.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatTemplatedExpander_ValueFactoryCannotReturnNull">
            <summary>
            The result of value factory cannot be null.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_InvalidHttpConstraints">
            <summary>
            A method '{0}' that defines attribute routed actions must not have attributes that implement '{1}' and do not implement '{2}':{3}{4}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_InvalidHttpConstraints(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A method '{0}' that defines attribute routed actions must not have attributes that implement '{1}' and do not implement '{2}':{3}{4}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_InvalidHttpConstraints_Item">
            <summary>
            Action '{0}' with route template '{1}' has '{2}' invalid '{3}' attributes.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_InvalidHttpConstraints_Item(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Action '{0}' with route template '{1}' has '{2}' invalid '{3}' attributes.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod">
            <summary>
            A method '{0}' must not define attribute routed actions and non attribute routed actions at the same time:{1}{2}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod(System.Object,System.Object,System.Object)">
            <summary>
            A method '{0}' must not define attribute routed actions and non attribute routed actions at the same time:{1}{2}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod_Item">
            <summary>
            Action: '{0}' - Template: '{1}'
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_MixedAttributeAndConventionallyRoutedActions_ForMethod_Item(System.Object,System.Object)">
            <summary>
            Action: '{0}' - Template: '{1}'
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.AttributeRoute_NullTemplateRepresentation">
            <summary>
            (none)
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatAttributeRoute_NullTemplateRepresentation">
            <summary>
            (none)
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.DefaultActionSelector_AmbiguousActions">
            <summary>
            Multiple actions matched. The following actions matched route data and had all constraints satisfied:{0}{0}{1}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatDefaultActionSelector_AmbiguousActions(System.Object,System.Object)">
            <summary>
            Multiple actions matched. The following actions matched route data and had all constraints satisfied:{0}{0}{1}
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Core.Resources.FileResult_InvalidPath">
            <summary>
            Could not find file: {0}
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Core.Resources.FormatFileResult_InvalidPath(System.Object)">
            <summary>
            Could not find file: {0}
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.BufferEntryCollection">
            <summary>
            Represents a hierarchy of strings and provides an enumerator that iterates over it as a sequence.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.BufferEntryCollection.Add(System.String)">
            <summary>
            Adds a string value to the buffer.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.BufferEntryCollection.Add(System.Char[],System.Int32,System.Int32)">
            <summary>
            Adds a subarray of characters to the buffer.
            </summary>
            <param name="value">The array to add.</param>
            <param name="index">The character position in the array at which to start copying data.</param>
            <param name="count">The number of characters to copy.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.BufferEntryCollection.Add(Microsoft.AspNet.Mvc.Rendering.BufferEntryCollection)">
            <summary>
            Adds an instance of <see cref="T:Microsoft.AspNet.Mvc.Rendering.BufferEntryCollection"/> to the buffer.
            </summary>
            <param name="buffer">The buffer collection to add.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.BufferEntryCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.Html5DateRenderingMode">
            <summary>
            Controls the value-rendering method For HTML5 input elements of types such as date, time, datetime and
            datetime-local.
            </summary>
        </member>
        <member name="F:Microsoft.AspNet.Mvc.Rendering.Html5DateRenderingMode.CurrentCulture">
            <summary>
            Render date and time values according to the current culture's ToString behavior.
            </summary>
        </member>
        <member name="F:Microsoft.AspNet.Mvc.Rendering.Html5DateRenderingMode.Rfc3339">
            <summary>
            Render date and time values as Rfc3339 compliant strings to support HTML5 date and time types of input
            elements.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions">
            <summary>
            Display-related extensions for <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> and <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using a display template. The template is found
            using the <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object"/> that contains the properties to display.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            <para>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            <paramref name="expression"/>'s value.
            </para>
            <para>
            Example <paramref name="expression"/>s include <c>string.Empty</c> which identifies the current model and
            <c>"prop"</c> which identifies the current model's "prop" property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using a display template and specified
            additional view data. The template is found using the <paramref name="expression"/>'s
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object"/> that contains the properties to display.
            </param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            <para>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            <paramref name="expression"/>'s value.
            </para>
            <para>
            Example <paramref name="expression"/>s include <c>string.Empty</c> which identifies the current model and
            <c>"prop"</c> which identifies the current model's "prop" property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using a display template. The template is found
            using the <paramref name="templateName"/> or the <paramref name="expression"/>'s
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object"/> that contains the properties to display.
            </param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            <para>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            <paramref name="expression"/>'s value.
            </para>
            <para>
            Example <paramref name="expression"/>s include <c>string.Empty</c> which identifies the current model and
            <c>"prop"</c> which identifies the current model's "prop" property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using a display template and specified
            additional view data. The template is found using the <paramref name="templateName"/> or the
            <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object"/> that contains the properties to display.
            </param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            <para>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            <paramref name="expression"/>'s value.
            </para>
            <para>
            Example <paramref name="expression"/>s include <c>string.Empty</c> which identifies the current model and
            <c>"prop"</c> which identifies the current model's "prop" property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.Display(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using a display template and specified HTML
            field name. The template is found using the <paramref name="templateName"/> or the
            <paramref name="expression"/>'s<see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object"/> that contains the properties to display.
            </param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="htmlFieldName">
            A <see cref="T:System.String"/> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            <para>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            <paramref name="expression"/>'s value.
            </para>
            <para>
            Example <paramref name="expression"/>s include <c>string.Empty</c> which identifies the current model and
            <c>"prop"</c> which identifies the current model's "prop" property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using a display template. The template is found
            using the <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            <paramref name="expression"/> result.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using a display template and specified
            additional view data. The template is found using the <paramref name="expression"/>'s
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            <paramref name="expression"/> result.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using a display template. The template is found
            using the <paramref name="templateName"/> or the <paramref name="expression"/>'s
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            <paramref name="expression"/> result.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using a display template and specified
            additional view data. The template is found using the <paramref name="templateName"/> or the
            <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            <paramref name="expression"/> result.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using a display template and specified HTML
            field name. The template is found using the <paramref name="templateName"/> or the
            <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="htmlFieldName">
            A <see cref="T:System.String"/> used to disambiguate the names of HTML elements that are created for properties
            that have the same name.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            <paramref name="expression"/> result.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper)">
            <summary>
            Returns HTML markup for the current model, using a display template. The template is found using the
            model's <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            current model.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.Object)">
            <summary>
            Returns HTML markup for the current model, using a display template and specified additional view data. The
            template is found using the model's <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            current model.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns HTML markup for the current model, using a display template. The template is found using the
            <paramref name="templateName"/> or the model's <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            current model.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns HTML markup for the current model, using a display template and specified additional view data. The
            template is found using the <paramref name="templateName"/> or the model's
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            current model.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String)">
            <summary>
            Returns HTML markup for the current model, using a display template and specified HTML field name. The
            template is found using the <paramref name="templateName"/> or the model's
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="htmlFieldName">
            A <see cref="T:System.String"/> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            current model.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayExtensions.DisplayForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns HTML markup for the current model, using a display template, specified HTML field name, and
            additional view data. The template is found using the <paramref name="templateName"/> or the model's
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="htmlFieldName">
            A <see cref="T:System.String"/> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            current model.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayNameExtensions">
            <summary>
            DisplayName-related extensions for <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> and <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayNameExtensions.DisplayNameForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper)">
            <summary>
            Returns the display name for the current model.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <returns>A <see cref="T:System.String"/> containing the display name.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperDisplayNameExtensions.DisplayNameFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{System.Collections.Generic.IEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the display name for the specified <paramref name="expression"/>
            if the current model represents a collection.
            </summary>
            <param name="htmlHelper">
            The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.
            </param>
            <param name="expression">An expression to be evaluated against an item in the current model.</param>
            <typeparam name="TModelItem">The type of items in the model collection.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A <see cref="T:System.String"/> containing the display name.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions">
            <summary>
            Editor-related extensions for <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> and <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using an editor template. The template is found
            using the <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object"/> that contains the properties to edit.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            <para>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression"/>'s value.
            </para>
            <para>
            Example <paramref name="expression"/>s include <c>string.Empty</c> which identifies the current model and
            <c>"prop"</c> which identifies the current model's "prop" property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using an editor template and specified
            additional view data. The template is found using the <paramref name="expression"/>'s
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object"/> that contains the properties to edit.
            </param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            <para>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression"/>'s value.
            </para>
            <para>
            Example <paramref name="expression"/>s include <c>string.Empty</c> which identifies the current model and
            <c>"prop"</c> which identifies the current model's "prop" property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using an editor template. The template is found
            using the <paramref name="templateName"/> or the <paramref name="expression"/>'s
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object"/> that contains the properties to edit.
            </param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            <para>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression"/>'s value.
            </para>
            <para>
            Example <paramref name="expression"/>s include <c>string.Empty</c> which identifies the current model and
            <c>"prop"</c> which identifies the current model's "prop" property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using an editor template and specified
            additional view data. The template is found using the <paramref name="templateName"/> or the
            <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object"/> that contains the properties to edit.
            </param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            <para>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression"/>'s value.
            </para>
            <para>
            Example <paramref name="expression"/>s include <c>string.Empty</c> which identifies the current model and
            <c>"prop"</c> which identifies the current model's "prop" property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.Editor(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using an editor template and specified HTML
            field name. The template is found using the <paramref name="templateName"/> or the
            <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object"/> that contains the properties to edit.
            </param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="htmlFieldName">
            A <see cref="T:System.String"/> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            <para>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression"/>'s value.
            </para>
            <para>
            Example <paramref name="expression"/>s include <c>string.Empty</c> which identifies the current model and
            <c>"prop"</c> which identifies the current model's "prop" property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using an editor template. The template is found
            using the <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression"/> result.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using an editor template and specified
            additional view data. The template is found using the <paramref name="expression"/>'s
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression"/> result.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using an editor template. The template is found
            using the <paramref name="templateName"/> or the <paramref name="expression"/>'s
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="templateName">The name of the template that is used to create the HTML markup.</param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression"/> result.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using an editor template and specified
            additional view data. The template is found using the <paramref name="templateName"/> or the
            <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="templateName">The name of the template that is used to create the HTML markup.</param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression"/> result.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.EditorFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using an editor template and specified HTML
            field name. The template is found using the <paramref name="templateName"/> or the
            <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="templateName">The name of the template that is used to create the HTML markup.</param>
            <param name="htmlFieldName">
            A <see cref="T:System.String"/> used to disambiguate the names of HTML elements that are created for properties
            that have the same name.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression"/> result.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper)">
            <summary>
            Returns HTML markup for the current model, using an editor template. The template is found using the
            model's <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression"/> result.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.Object)">
            <summary>
            Returns HTML markup for the current model, using an editor template and specified additional view data. The
            template is found using the model's <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the current model.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns HTML markup for the current model, using an editor template. The template is found using the
            <paramref name="templateName"/> or the model's <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the current model.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns HTML markup for the current model, using an editor template and specified additional view data. The
            template is found using the <paramref name="templateName"/> or the model's
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the current model.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String)">
            <summary>
            Returns HTML markup for the current model, using an editor template and specified HTML field name. The
            template is found using the <paramref name="templateName"/> or the model's
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="htmlFieldName">
            A <see cref="T:System.String"/> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the current model.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperEditorExtensions.EditorForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns HTML markup for the current model, using an editor template, specified HTML field name, and
            additional view data. The template is found using the <paramref name="templateName"/> or the model's
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="htmlFieldName">
            A <see cref="T:System.String"/> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/>
            that can contain additional view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/>
            instance created for the template.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the current model.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelperFormExtensions">
            <summary>
            DisplayName-related extensions for <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper)">
            <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form,
            the request will be processed by same action. That is the rendered URL will match the current
            request.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <returns>
            An <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> instance which renders the &lt;/form&gt; end tag when disposed.
            </returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,Microsoft.AspNet.Mvc.Rendering.FormMethod)">
            <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form,
            the request will be processed by an action method.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="method">The HTTP method for processing the form, either GET or POST.</param>
            <returns>
            An <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> instance which renders the &lt;/form&gt; end tag when disposed.
            </returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,Microsoft.AspNet.Mvc.Rendering.FormMethod,System.Object)">
            <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form,
            the request will be processed by an action method.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="method">The HTTP method for processing the form, either GET or POST.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>
            An <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> instance which renders the &lt;/form&gt; end tag when disposed.
            </returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.Object)">
            <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form,
            the request will be processed by an action method.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route
            parameters.
            </param>
            <returns>
            An <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> instance which renders the &lt;/form&gt; end tag when disposed.
            </returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String)">
            <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form,
            the request will be processed by an action method.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <returns>
            An <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> instance which renders the &lt;/form&gt; end tag when disposed.
            </returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form,
            the request will be processed by an action method.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route
            parameters.
            </param>
            <returns>
            An <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> instance which renders the &lt;/form&gt; end tag when disposed.
            </returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,Microsoft.AspNet.Mvc.Rendering.FormMethod)">
            <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form,
            the request will be processed by an action method.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="method">The HTTP method for processing the form, either GET or POST.</param>
            <returns>
            An <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> instance which renders the &lt;/form&gt; end tag when disposed.
            </returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object,Microsoft.AspNet.Mvc.Rendering.FormMethod)">
            <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form,
            the request will be processed by an action method.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route
            parameters.
            </param>
            <param name="method">The HTTP method for processing the form, either GET or POST.</param>
            <returns>
            An <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> instance which renders the &lt;/form&gt; end tag when disposed.
            </returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperFormExtensions.BeginForm(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,Microsoft.AspNet.Mvc.Rendering.FormMethod,System.Object)">
            <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form,
            the request will be processed by an action method.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="method">The HTTP method for processing the form, either GET or POST.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>
            An <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> instance which renders the &lt;/form&gt; end tag when disposed.
            </returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions">
            <summary>
            Input-related extensions for <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> and <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns an &lt;input&gt; element of type "checkbox" with value "true" and an &lt;input&gt; element of type
            "hidden" with value "false".
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; elements.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set checkbox
            element's "name" attribute. Sanitizes <paramref name="name"/> to set checkbox element's "id" attribute.
            </para>
            <para>Determines checkbox element's "checked" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.Boolean"/>.
            </item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.Boolean"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.Boolean"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, does not include a "checked" attribute.</item>
            </list>
            <para>
            In all but the default case, includes a "checked" attribute with
            value "checked" if the <see cref="T:System.Boolean"/> values is <c>true</c>; does not include the attribute otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Boolean)">
            <summary>
            Returns an &lt;input&gt; element of type "checkbox" with value "true" and an &lt;input&gt; element of type
            "hidden" with value "false".
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="isChecked">If <c>true</c>, checkbox is initially checked.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; elements.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set checkbox
            element's "name" attribute. Sanitizes <paramref name="name"/> to set checkbox element's "id" attribute.
            </para>
            <para>Determines checkbox element's "checked" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.Boolean"/>.
            </item>
            <item><paramref name="isChecked"/> if non-<c>null</c>.</item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.Boolean"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.Boolean"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, does not include a "checked" attribute.</item>
            </list>
            <para>
            In all but the default case, includes a "checked" attribute with
            value "checked" if the <see cref="T:System.Boolean"/> values is <c>true</c>; does not include the attribute otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.CheckBox(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "checkbox" with value "true" and an &lt;input&gt; element of type
            "hidden" with value "false".
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the checkbox element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; elements.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set checkbox
            element's "name" attribute. Sanitizes <paramref name="name"/> to set checkbox element's "id" attribute.
            </para>
            <para>Determines checkbox element's "checked" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.Boolean"/>.
            </item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.Boolean"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.Boolean"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Existing "checked" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, does not include a "checked" attribute.</item>
            </list>
            <para>
            In all but the <paramref name="htmlAttributes"/> and default cases, includes a "checked" attribute with
            value "checked" if the <see cref="T:System.Boolean"/> values is <c>true</c>; does not include the attribute otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.CheckBoxFor``1(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns an &lt;input&gt; element of type "checkbox" with value "true" and an &lt;input&gt; element of type
            "hidden" with value "false".
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; elements.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set checkbox element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set checkbox element's "id" attribute.
            </para>
            <para>Determines checkbox element's "checked" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for the string representation of the
            <paramref name="expression"/> if entry exists and can be converted to a <see cref="T:System.Boolean"/>.
            </item>
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a
            <see cref="T:System.Boolean"/>.
            </item>
            <item>Otherwise, does not include a "checked" attribute.</item>
            </list>
            <para>
            In all but the default case, includes a "checked" attribute with
            value "checked" if the <see cref="T:System.Boolean"/> values is <c>true</c>; does not include the attribute otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.Hidden(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns an &lt;input&gt; element of type "hidden" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.Hidden(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "hidden" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">If non-<c>null</c>, value to include in the element.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item><paramref name="value"/> if non-<c>null</c>.</item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.HiddenFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns an &lt;input&gt; element of type "hidden" for the specified <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;input&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for the string representation of the
            <paramref name="expression"/> if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a
            <see cref="T:System.String"/>.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.Password(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns an &lt;input&gt; element of type "password" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute. Sets &lt;input&gt; element's "value" attribute to <c>string.Empty</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.Password(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "password" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">If non-<c>null</c>, value to include in the element.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item><paramref name="value"/> if non-<c>null</c>.</item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.PasswordFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns an &lt;input&gt; element of type "password" for the specified <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;input&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a
            <see cref="T:System.String"/>.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "radio" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">Value to include in the element. Must not be <c>null</c>.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute. Sets &lt;input&gt; element's "value" attribute to <paramref name="value"/>.
            </para>
            <para>Determines &lt;input&gt; element's "checked" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, does not include a "checked" attribute.</item>
            </list>
            <para>
            In all but the default case, includes a "checked" attribute with
            value "checked" if the <see cref="T:System.String"/> values is equal to a converted <see cref="T:System.String"/> for
            <paramref name="value"/> or <paramref name="isChecked"/> is <c>true</c> (for that case); does not include
            the attribute otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "radio" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">
            If non-<c>null</c>, value to include in the element. Must not be <c>null</c> if no "checked" entry exists
            in <paramref name="htmlAttributes"/>.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item><paramref name="value"/> if non-<c>null</c>.</item>
            <item>Existing "value" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            <para>Determines &lt;input&gt; element's "checked" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>Existing "checked" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, does not include a "checked" attribute.</item>
            </list>
            <para>
            In all but the <paramref name="htmlAttributes"/> and default cases, includes a "checked" attribute with
            value "checked" if the <see cref="T:System.String"/> values is equal to a converted <see cref="T:System.String"/> for
            <paramref name="value"/> or <paramref name="isChecked"/> is <c>true</c> (for that case); does not include
            the attribute otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.RadioButton(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Boolean)">
            <summary>
            Returns an &lt;input&gt; element of type "radio" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">
            If non-<c>null</c>, value to include in the element. Must not be <c>null</c> if
            <paramref name="isChecked"/> is also <c>null</c>.
            </param>
            <param name="isChecked">
            If <c>true</c>, radio button is initially selected. Must not be <c>null</c> if
            <paramref name="value"/> is also <c>null</c>.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item><paramref name="value"/> if non-<c>null</c>.</item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            <para>Determines &lt;input&gt; element's "checked" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item><paramref name="isChecked"/> if non-<c>null</c>.</item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            otherwise.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, does not include a "checked" attribute.</item>
            </list>
            <para>
            In all but the default case, includes a "checked" attribute with
            value "checked" if the <see cref="T:System.String"/> values is equal to a converted <see cref="T:System.String"/> for
            <paramref name="value"/> or <paramref name="isChecked"/> is <c>true</c> (for that case); does not include
            the attribute otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.RadioButtonFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "radio" for the specified <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="value">Value to include in the element. Must not be <c>null</c>.</param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;select&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute. Converts the
            <paramref name="value"/> to a <see cref="T:System.String"/> to set element's "value" attribute.
            </para>
            <para>Determines &lt;input&gt; element's "checked" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for the string representation of the
            <paramref name="expression"/> if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a <see cref="T:System.String"/>.
            </item>
            <item>Otherwise, does not include a "checked" attribute.</item>
            </list>
            <para>
            In all but the default case, includes a "checked" attribute with
            value "checked" if the <see cref="T:System.String"/> values is equal to a converted <see cref="T:System.String"/> for
            <paramref name="value"/>; does not include the attribute otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns an &lt;input&gt; element of type "text" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "text" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">If non-<c>null</c>, value to include in the element.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="value"/> if non-<c>null</c>.
            </item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.String)">
            <summary>
            Returns an &lt;input&gt; element of type "text" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">If non-<c>null</c>, value to include in the element.</param>
            <param name="format">
            The composite format <see cref="T:System.String"/> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="value"/> if non-<c>null</c>. Formats <paramref name="value"/> using
            <paramref name="format"/> or converts <paramref name="value"/> to a <see cref="T:System.String"/> directly if
            <paramref name="format"/> is <c>null</c> or empty.
            </item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name) if
            entry exists and can be converted to a <see cref="T:System.String"/>. Formats entry using <paramref name="format"/>
            or converts entry to a <see cref="T:System.String"/> directly if <paramref name="format"/> is <c>null</c> or empty.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property. Formats result using <paramref name="format"/> or converts result to a <see cref="T:System.String"/>
            directly if <paramref name="format"/> is <c>null</c> or empty.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.TextBox(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "text" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">If non-<c>null</c>, value to include in the element.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="value"/> if non-<c>null</c>.
            </item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Existing "value" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns an &lt;input&gt; element of type "text" for the specified <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;input&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for the string representation of the
            <paramref name="expression"/> if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a <see cref="T:System.String"/>.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Returns an &lt;input&gt; element of type "text" for the specified <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="format">
            The composite format <see cref="T:System.String"/> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;input&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for the string representation of the
            <paramref name="expression"/> if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a <see cref="T:System.String"/>.
            Formats result using <paramref name="format"/> or converts result to a <see cref="T:System.String"/> directly if
            <paramref name="format"/> is <c>null</c> or empty.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.TextBoxFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "text" for the specified <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;input&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for the string representation of the
            <paramref name="expression"/> if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a <see cref="T:System.String"/>.
            </item>
            <item>Existing "value" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns a &lt;textarea&gt; element for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;textarea&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;textarea&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;textarea&gt; element's content based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns a &lt;textarea&gt; element for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;textarea&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;textarea&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;textarea&gt; element's content based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String)">
            <summary>
            Returns a &lt;textarea&gt; element for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">If non-<c>null</c>, value to include in the element.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;textarea&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;textarea&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;textarea&gt; element's content based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item><paramref name="value"/> if non-<c>null</c>.</item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.TextArea(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns a &lt;textarea&gt; element for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">If non-<c>null</c>, value to include in the element.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;textarea&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;textarea&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;textarea&gt; element's content based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a
            fully-qualified name) if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item><paramref name="value"/> if non-<c>null</c>.</item>
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.TextAreaFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns a &lt;textarea&gt; element for the specified <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;textarea&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;textarea&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </para>
            <para>Determines &lt;textarea&gt; element's content based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for the string representation of the
            <paramref name="expression"/> if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a <see cref="T:System.String"/>.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperInputExtensions.TextAreaFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
            <summary>
            Returns a &lt;textarea&gt; element for the specified <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;textarea&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;textarea&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </para>
            <para>Determines &lt;textarea&gt; element's content based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for the string representation of the
            <paramref name="expression"/> if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a <see cref="T:System.String"/>.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLabelExtensions">
            <summary>
            Label-related extensions for <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> and <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLabelExtensions.Label(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns a &lt;label&gt; element for the specified expression <paramref name="name"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">Expression name, relative to the current model.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;label&gt; element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLabelExtensions.Label(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String)">
            <summary>
            Returns a &lt;label&gt; element for the specified expression <paramref name="name"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">Expression name, relative to the current model.</param>
            <param name="labelText">The inner text of the element.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;label&gt; element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns a &lt;label&gt; element for the specified <paramref name="expression"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;label&gt; element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Returns a &lt;label&gt; element for the specified <paramref name="expression"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="labelText">The inner text of the element.</param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;label&gt; element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLabelExtensions.LabelFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
            <summary>
            Returns a &lt;label&gt; element for the specified <paramref name="expression"/>.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;label&gt; element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper)">
            <summary>
            Returns a &lt;label&gt; element for the current model.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;label&gt; element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns a &lt;label&gt; element for the current model.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="labelText">The inner text of the element.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;label&gt; element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.Object)">
            <summary>
            Returns a &lt;label&gt; element for the current model.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;label&gt; element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLabelExtensions.LabelForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns a &lt;label&gt; element for the current model.
            </summary>
            <param name="html">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="labelText">The inner text of the element.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;label&gt; element.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLinkExtensions">
            <summary>
            Link-related extensions for <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String)">
            <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified action.
            </summary>
            <param name="helper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
            <param name="actionName">The name of the action.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the anchor element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified action.
            </summary>
            <param name="helper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
            <param name="actionName">The name of the action.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route
            parameters.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the anchor element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object,System.Object)">
            <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified action.
            </summary>
            <param name="helper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
            <param name="actionName">The name of the action.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route
            parameters.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the anchor element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)">
            <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified action.
            </summary>
            <param name="helper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
            <param name="actionName">The name of the action.</param>
            <param name="controllerName">The name of the controller.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the anchor element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified action.
            </summary>
            <param name="helper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
            <param name="actionName">The name of the action.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route
            parameters.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the anchor element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLinkExtensions.ActionLink(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified action.
            </summary>
            <param name="helper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
            <param name="actionName">The name of the action.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route
            parameters.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the anchor element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified route.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route
            parameters.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the anchor element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String)">
            <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified route.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
            <param name="routeName">The name of the route.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the anchor element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified route.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
            <param name="routeName">The name of the route.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route
            parameters.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the anchor element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.Object)">
            <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified route.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route
            parameters.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the anchor element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperLinkExtensions.RouteLink(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object,System.Object)">
            <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified route.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
            <param name="routeName">The name of the route.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route
            parameters.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the anchor element.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelperNameExtensions">
            <summary>
            Name-related extensions for <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperNameExtensions.NameForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper)">
            <summary>
            Returns the full HTML element name for the current model.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <returns>A <see cref="T:System.String"/> containing the element name.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperNameExtensions.IdForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper)">
            <summary>
            Returns the HTML element Id for the current model.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <returns>A <see cref="T:System.String"/> containing the element Id.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelperPartialExtensions">
            <summary>
            PartialView-related extensions for <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns HTML markup for the specified partial view.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that on completion returns a new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing
            the created HTML.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNet.Mvc.ViewDataDictionary)">
            <summary>
            Returns HTML markup for the specified partial view.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
            <param name="viewData">A <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> to pass into the partial view.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that on completion returns a new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing
            the created HTML.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperPartialExtensions.PartialAsync(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns HTML markup for the specified partial view.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
            <param name="model">A model to pass into the partial view.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that on completion returns a new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing
            the created HTML.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns HTML markup for the specified partial view.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
            <returns>
            Returns a new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.
            </returns>
            <remarks>
            This method synchronously calls and blocks on
            <see cref="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.PartialAsync(System.String,System.Object,Microsoft.AspNet.Mvc.ViewDataDictionary)"/>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNet.Mvc.ViewDataDictionary)">
            <summary>
            Returns HTML markup for the specified partial view.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
            <param name="viewData">A <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> to pass into the partial view.</param>
            <returns>
            Returns a new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.
            </returns>
            <remarks>
            This method synchronously calls and blocks on
            <see cref="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.PartialAsync(System.String,System.Object,Microsoft.AspNet.Mvc.ViewDataDictionary)"/>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns HTML markup for the specified partial view.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
            <param name="model">A model to pass into the partial view.</param>
            <returns>
            Returns a new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.
            </returns>
            <remarks>
            This method synchronously calls and blocks on
            <see cref="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.PartialAsync(System.String,System.Object,Microsoft.AspNet.Mvc.ViewDataDictionary)"/>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperPartialExtensions.Partial(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object,Microsoft.AspNet.Mvc.ViewDataDictionary)">
            <summary>
            Returns HTML markup for the specified partial view.
            </summary>
            <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
            <param name="model">A model to pass into the partial view.</param>
            <param name="viewData">A <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> to pass into the partial view.</param>
            <returns>
            Returns a new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.
            </returns>
            <remarks>
            This method synchronously calls and blocks on
            <see cref="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.PartialAsync(System.String,System.Object,Microsoft.AspNet.Mvc.ViewDataDictionary)"/>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Renders HTML markup for the specified partial view.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that renders the created HTML when it executes.</returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,Microsoft.AspNet.Mvc.ViewDataDictionary)">
            <summary>
            Renders HTML markup for the specified partial view.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
            <param name="viewData">A <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> to pass into the partial view.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that renders the created HTML when it executes.</returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperPartialExtensions.RenderPartialAsync(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Renders HTML markup for the specified partial view.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
            <param name="model">A model to pass into the partial view.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that renders the created HTML when it executes.</returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelperSelectExtensions">
            <summary>
            Select-related extensions for <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> and <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns a single-selection HTML &lt;select&gt; element for the expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;select&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String)">
            <summary>
            Returns a single-selection HTML &lt;select&gt; element for the expression <paramref name="name"/>,
            using the option label.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="optionLabel">
            The text for a default empty item. Does not include such an item if argument is <c>null</c>.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;select&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem})">
            <summary>
            Returns a single-selection HTML &lt;select&gt; element for the expression <paramref name="name"/>,
            using the specified list items.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;select&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem},System.Object)">
            <summary>
            Returns a single-selection HTML &lt;select&gt; element for the expression <paramref name="name"/>,
            using the specified list items and HTML attributes.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the &lt;select&gt; element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;select&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownList(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem},System.String)">
            <summary>
            Returns a single-selection HTML &lt;select&gt; element for the expression <paramref name="name"/>,
            using the specified list items and option label.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
            <param name="optionLabel">
            The text for a default empty item. Does not include such an item if argument is <c>null</c>.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;select&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem})">
            <summary>
            Returns a single-selection HTML &lt;select&gt; element for the <paramref name="expression"/>, using the
            specified list items.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;select&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem},System.Object)">
            <summary>
            Returns a single-selection HTML &lt;select&gt; element for the <paramref name="expression"/>, using the
            specified list items and HTML attributes.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the &lt;select&gt; element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;select&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperSelectExtensions.DropDownListFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem},System.String)">
            <summary>
            Returns a single-selection HTML &lt;select&gt; element for the <paramref name="expression"/>, using the
            specified list items and option label.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
            <param name="optionLabel">
            The text for a default empty item. Does not include such an item if argument is <c>null</c>.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;select&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperSelectExtensions.ListBox(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns a multi-selection &lt;select&gt; element for the expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;select&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperSelectExtensions.ListBox(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem})">
            <summary>
            Returns a multi-selection &lt;select&gt; element for the expression <paramref name="name"/>, using the
            specified list items.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;select&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperSelectExtensions.ListBoxFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem})">
            <summary>
            Returns a multi-selection &lt;select&gt; element for the  <paramref name="expression"/>, using the
            specified list items.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;select&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions">
            <summary>
            Validation-related extensions for <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> and <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/>
            object for the specified expression <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">Expression name, relative to the current model.</param>
            <returns>
            A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/> element.
            <c>null</c> if the expression <paramref name="expression"/> is valid and client-side validation is
            disabled.
            </returns>
            <remarks>
            Method extracts an error string from the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object. Message
            will always be visible but client-side validation may update the associated CSS class.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String)">
            <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/>
            object for the specified expression <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">Expression name, relative to the current model.</param>
            <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
            <returns>
            A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/> element.
            <c>null</c> if the expression <paramref name="expression"/> is valid and client-side validation is
            disabled.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/>
            object for the specified expression <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">Expression name, relative to the current model.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the
            (<see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/>) element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>
            A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/> element.
            <c>null</c> if the expression <paramref name="expression"/> is valid and client-side validation is
            disabled.
            </returns>
            <remarks>
            Method extracts an error string from the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object. Message
            will always be visible but client-side validation may update the associated CSS class.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.String)">
            <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/>
            object for the specified expression <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">Expression name, relative to the current model.</param>
            <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
            <param name="tag">
            The tag to wrap the <paramref name="message"/> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/>.
            </param>
            <returns>
            A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a <paramref name="tag"/> element. <c>null</c> if the
            expression <paramref name="expression"/> is valid and client-side validation is disabled.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessage(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String,System.Object)">
            <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/>
            object for the specified expression <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">Expression name, relative to the current model.</param>
            <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the
            (<see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/>) element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <returns>
            A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/> element.
            <c>null</c> if the expression <paramref name="expression"/> is valid and client-side validation is
            disabled.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/>
            object for the specified <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>
            A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/> element.
            <c>null</c> if the expression <paramref name="expression"/> is valid and client-side validation is
            disabled.
            </returns>
            <remarks>
            Method extracts an error string from the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object. Message
            will always be visible but client-side validation may update the associated CSS class.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/>
            object for the specified <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>
            A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/> element.
            <c>null</c> if the expression <paramref name="expression"/> is valid and client-side validation is
            disabled.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
            <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/>
            object for the specified <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the
            (<see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/>) element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML
            attributes.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>
            A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/> element.
            <c>null</c> if the expression <paramref name="expression"/> is valid and client-side validation is
            disabled.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationMessageFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
            <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/>
            object for the specified <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
            <param name="tag">
            The tag to wrap the <paramref name="message"/> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/>.
            </param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>
            A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the <paramref name="tag"/> element. <c>null</c> if the
            <paramref name="expression"/> is valid and client-side validation is disabled.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper)">
            <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <returns>
            New <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a &lt;div&gt; element wrapping the &lt;ul&gt; element.
            <see cref="P:Microsoft.AspNet.Mvc.Rendering.HtmlString.Empty"/> if the current model is valid and client-side validation is disabled).
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.Boolean)">
            <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="excludePropertyErrors">
            If <c>true</c>, display model-level errors only; otherwise display all errors.
            </param>
            <returns>
            New <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a &lt;div&gt; element wrapping the &lt;ul&gt; element.
            <see cref="P:Microsoft.AspNet.Mvc.Rendering.HtmlString.Empty"/> if the current model is valid and client-side validation is disabled).
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="message">The message to display with the validation summary.</param>
            <returns>
            New <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a &lt;div&gt; element wrapping the
            <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationSummaryMessageElement" /> element (which wraps the
            <paramref name="message"/>) and the &lt;ul&gt; element. <see cref="P:Microsoft.AspNet.Mvc.Rendering.HtmlString.Empty"/> if the current model
            is valid and client-side validation is disabled).
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.String)">
            <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="message">The message to display with the validation summary.</param>
            <param name="tag">
            The tag to wrap the <paramref name="message"/> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationSummaryMessageElement" />.
            </param>
            <returns>
            New <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a &lt;div&gt; element wrapping the <paramref name="tag"/> element
            and the &lt;ul&gt; element. <see cref="P:Microsoft.AspNet.Mvc.Rendering.HtmlString.Empty"/> if the current model is valid and client-side
            validation is disabled).
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.Boolean,System.String)">
            <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="excludePropertyErrors">
            If <c>true</c>, display model-level errors only; otherwise display all errors.
            </param>
            <param name="message">The message to display with the validation summary.</param>
            <returns>
            New <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a &lt;div&gt; element wrapping the
            <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationSummaryMessageElement" /> element (which, in turn, wraps the
            <paramref name="message"/>) and the &lt;ul&gt; element. <see cref="P:Microsoft.AspNet.Mvc.Rendering.HtmlString.Empty"/> if the current model
            is valid and client-side validation is disabled).
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object)">
            <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="message">The message to display with the validation summary.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the topmost (&lt;div&gt;) element.
            Alternatively, an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing
            the HTML attributes.
            </param>
            <returns>
            New <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a &lt;div&gt; element wrapping the
            <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationSummaryMessageElement" /> element (which wraps the
            <paramref name="message"/>) and the &lt;ul&gt; element. <see cref="P:Microsoft.AspNet.Mvc.Rendering.HtmlString.Empty"/> if the current model
            is valid and client-side validation is disabled).
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String,System.Object,System.String)">
            <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="message">The message to display with the validation summary.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the topmost (&lt;div&gt;) element.
            Alternatively, an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing
            the HTML attributes.
            </param>
            <param name="tag">
            The tag to wrap the <paramref name="message"/> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationSummaryMessageElement" />.
            </param>
            <returns>
            New <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a &lt;div&gt; element wrapping the <paramref name="tag"/> element
            and the &lt;ul&gt; element. <see cref="P:Microsoft.AspNet.Mvc.Rendering.HtmlString.Empty"/> if the current model is valid and client-side
            validation is disabled).
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.Boolean,System.String,System.String)">
            <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="excludePropertyErrors">
            If <c>true</c>, display model-level errors only; otherwise display all errors.
            </param>
            <param name="message">The message to display with the validation summary.</param>
            <param name="tag">
            The tag to wrap the <paramref name="message"/> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationSummaryMessageElement" />.
            </param>
            <returns>
            New <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a &lt;div&gt; element wrapping the <paramref name="tag"/> element
            and the &lt;ul&gt; element. <see cref="P:Microsoft.AspNet.Mvc.Rendering.HtmlString.Empty"/> if the current model is valid and client-side
            validation is disabled).
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValidationExtensions.ValidationSummary(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.Boolean,System.String,System.Object)">
            <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="excludePropertyErrors">
            If <c>true</c>, display model-level errors only; otherwise display all errors.
            </param>
            <param name="message">The message to display with the validation summary.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the topmost (&lt;div&gt;) element.
            Alternatively, an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing
            the HTML attributes.
            </param>
            <returns>
            New <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a &lt;div&gt; element wrapping the
            <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationSummaryMessageElement" /> element (which wraps the
            <paramref name="message"/>) and the &lt;ul&gt; element. <see cref="P:Microsoft.AspNet.Mvc.Rendering.HtmlString.Empty"/> if the current model
            is valid and client-side validation is disabled).
            </returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValueExtensions">
            <summary>
            Value-related extensions for <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> and <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValueExtensions.Value(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns the formatted value for the specified expression <paramref name="name"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="name">Expression name, relative to the current model.</param>
            <returns>A <see cref="T:System.String"/> containing the formatted value.</returns>
            <remarks>
            Converts the expression result to a <see cref="T:System.String"/> directly.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValueExtensions.ValueFor``2(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the formatted value for the specified <paramref name="expression"/>.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1"/> instance this method extends.</param>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A <see cref="T:System.String"/> containing the formatted value.</returns>
            <remarks>
            Converts the <paramref name="expression"/> result to a <see cref="T:System.String"/> directly.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValueExtensions.ValueForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper)">
            <summary>
            Returns the formatted value for the current model.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <returns>A <see cref="T:System.String"/> containing the formatted value.</returns>
            <remarks>
            Converts the model value to a <see cref="T:System.String"/> directly.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelperValueExtensions.ValueForModel(Microsoft.AspNet.Mvc.Rendering.IHtmlHelper,System.String)">
            <summary>
            Returns the formatted value for the current model.
            </summary>
            <param name="htmlHelper">The <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> instance this method extends.</param>
            <param name="format">
            The composite format <see cref="T:System.String"/> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            </param>
            <returns>A <see cref="T:System.String"/> containing the formatted value.</returns>
            <remarks>
            Converts the model value to a <see cref="T:System.String"/> directly if
            <paramref name="format"/> is <c>null</c> or empty.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlString.#ctor(Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> that is backed by <paramref name="writer"/>.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlString.WriteTo(System.IO.TextWriter)">
            <summary>
            Writes the value in this instance of <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> to the target <paramref name="targetWriter"/>.
            </summary>
            <param name="targetWriter">The <see cref="T:System.IO.TextWriter"/> to write contents to.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlString.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper">
            <summary>
            Base HTML helpers.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Html5DateRenderingMode">
            <summary>
            Set this property to <see cref="F:Microsoft.AspNet.Mvc.Rendering.Html5DateRenderingMode.Rfc3339"/> to have templated helpers such as
            <see cref="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Editor(System.String,System.String,System.String,System.Object)"/> and <see cref="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.EditorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String,System.Object)"/> render date and time values as RFC
            3339 compliant strings. By default these helpers render dates and times using the current culture.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.IdAttributeDotReplacement">
            <summary>
            Gets or sets the character that replaces periods in the ID attribute of an element.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.MetadataProvider">
            <summary>
            Gets the metadata provider. Intended for use in <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> extension methods.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ViewBag">
            <summary>
            Gets the view bag.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ViewContext">
            <summary>
            Gets the context information about the view.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ViewData">
            <summary>
            Gets the current view data.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ActionLink(System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified action.
            </summary>
            <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
            <param name="actionName">The name of the action.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="protocol">The protocol for the URL, such as &quot;http&quot; or &quot;https&quot;.</param>
            <param name="hostname">The host name for the URL.</param>
            <param name="fragment">The URL fragment name (the anchor name).</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route parameters.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the anchor element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.AntiForgeryToken">
            <summary>
            Returns a &lt;hidden&gt; element (anti-forgery token) that will be validated when the containing
            &lt;form&gt; is submitted.
            </summary>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;hidden&gt; element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.BeginForm(System.String,System.String,System.Object,Microsoft.AspNet.Mvc.Rendering.FormMethod,System.Object)">
            <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form,
            the request will be processed by an action method.
            </summary>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route parameters.
            </param>
            <param name="method">The HTTP method for processing the form, either GET or POST.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>
            An <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> instance which renders the &lt;/form&gt; end tag when disposed.
            </returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.CheckBox(System.String,System.Nullable{System.Boolean},System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "checkbox" with value "true" and an &lt;input&gt; element of type
            "hidden" with value "false".
            </summary>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="isChecked">If <c>true</c>, checkbox is initially checked.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the checkbox element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; elements.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set checkbox
            element's "name" attribute. Sanitizes <paramref name="name"/> to set checkbox element's "id" attribute.
            </para>
            <para>Determines checkbox element's "checked" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.Boolean"/>.
            </item>
            <item><paramref name="isChecked"/> if non-<c>null</c>.</item>
            <item>
            <see cref="P:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ViewData"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.Boolean"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.Boolean"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Existing "checked" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, does not include a "checked" attribute.</item>
            </list>
            <para>
            In all but the <paramref name="htmlAttributes"/> and default cases, includes a "checked" attribute with
            value "checked" if the <see cref="T:System.Boolean"/> values is <c>true</c>; does not include the attribute otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Display(System.String,System.String,System.String,System.Object)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using a display template, specified HTML field
            name, and additional view data. The template is found using the <paramref name="templateName"/> or the
            <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object"/> that contains the properties to display.
            </param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="htmlFieldName">
            A <see cref="T:System.String"/> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/> that can contain additional
            view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/> instance created for the
            template.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            <para>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            <paramref name="expression"/>'s value.
            </para>
            <para>
            Example <paramref name="expression"/>s include <c>string.Empty</c> which identifies the current model and
            <c>"prop"</c> which identifies the current model's "prop" property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.DisplayName(System.String)">
            <summary>
            Returns the display name for the specified expression <paramref name="expression"/>.
            </summary>
            <param name="expression">Expression name, relative to the current model.</param>
            <returns>A <see cref="T:System.String"/> containing the display name.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.DisplayText(System.String)">
            <summary>
            Returns the simple display text for the specified expression <paramref name="name"/>.
            </summary>
            <param name="name">Expression name, relative to the current model.</param>
            <returns>
            A <see cref="T:System.String"/> containing the simple display text.
            If the expression result is <c>null</c>, returns <see cref="P:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata.NullDisplayText"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.DropDownList(System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem},System.String,System.Object)">
            <summary>
            Returns a single-selection HTML &lt;select&gt; element for the expression <paramref name="name"/>,
            using the specified list items, option label, and HTML attributes.
            </summary>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
            <param name="optionLabel">
            The text for a default empty item. Does not include such an item if argument is <c>null</c>.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the &lt;select&gt; element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;select&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Editor(System.String,System.String,System.String,System.Object)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using an editor template, specified HTML field
            name, and additional view data. The template is found using the <paramref name="templateName"/> or the
            <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="expression">
            Expression name, relative to the current model. May identify a single property or an
            <see cref="T:System.Object"/> that contains the properties to edit.
            </param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="htmlFieldName">
            A <see cref="T:System.String"/> used to disambiguate the names of HTML elements that are created for
            properties that have the same name.
            </param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/> that can contain additional
            view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/> instance created for the
            template.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            <para>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression"/>'s value.
            </para>
            <para>
            Example <paramref name="expression"/>s include <c>string.Empty</c> which identifies the current model and
            <c>"prop"</c> which identifies the current model's "prop" property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Encode(System.Object)">
            <summary>
            Converts the <paramref name="value"/> to an HTML-encoded <see cref="T:System.String"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to encode.</param>
            <returns>The HTML-encoded <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Encode(System.String)">
            <summary>
            Converts the specified <see cref="T:System.String"/> to an HTML-encoded <see cref="T:System.String"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> to encode.</param>
            <returns>The HTML-encoded <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.EndForm">
            <summary>
            Renders the &lt;/form&gt; end tag to the response.
            </summary>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.FormatValue(System.Object,System.String)">
            <summary>
            Formats the value.
            </summary>
            <param name="value">The value.</param>
            <param name="format">
            The composite format <see cref="T:System.String"/> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            </param>
            <returns>A <see cref="T:System.String"/> containing the formatted value.</returns>
            <remarks>
            Converts <paramref name="value"/> to a <see cref="T:System.String"/> directly if
            <paramref name="format"/> is <c>null</c> or empty.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.GenerateIdFromName(System.String)">
            <summary>
            Returns an HTML element Id for the specified expression <paramref name="name"/>.
            </summary>
            <param name="name">
            Fully-qualified expression name, ignoring the current model. Must not be <c>null</c>.
            </param>
            <returns>A <see cref="T:System.String"/> containing the element Id.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.GetClientValidationRules(Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String)">
            <summary>
            Returns information about about client validation rules for the specified <paramref name="metadata"/> or
            <paramref name="name"/>. Intended for use in <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> extension methods.
            </summary>
            <param name="metadata">Metadata about the <see cref="T:System.Object"/> of interest.</param>
            <param name="name">
            Expression name, relative to the current model. Used to determine <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/> when
            <paramref name="metadata"/> is <c>null</c>; ignored otherwise.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the relevant rules.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Hidden(System.String,System.Object,System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "hidden" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">If non-<c>null</c>, value to include in the element.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item><paramref name="value"/> if non-<c>null</c>.</item>
            <item>
            <see cref="P:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ViewData"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Existing "value" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Id(System.String)">
            <summary>
            Returns the HTML element Id for the specified expression <paramref name="name"/>.
            </summary>
            <param name="name">Expression name, relative to the current model.</param>
            <returns>A <see cref="T:System.String"/> containing the element Id.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Label(System.String,System.String,System.Object)">
            <summary>
            Returns a &lt;label&gt; element for the specified expression <paramref name="name"/>.
            </summary>
            <param name="expression">Expression name, relative to the current model.</param>
            <param name="labelText">The inner text of the element.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;label&gt; element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ListBox(System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem},System.Object)">
            <summary>
            Returns a multi-selection &lt;select&gt; element for the expression <paramref name="name"/>, using the
            specified list items and HTML attributes.
            </summary>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the &lt;select&gt; element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;select&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Name(System.String)">
            <summary>
            Returns the full HTML element name for the specified expression <paramref name="name"/>.
            </summary>
            <param name="name">Expression name, relative to the current model.</param>
            <returns>A <see cref="T:System.String"/> containing the element name.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.PartialAsync(System.String,System.Object,Microsoft.AspNet.Mvc.ViewDataDictionary)">
            <summary>
            Returns HTML markup for the specified partial view.
            </summary>
            <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
            <param name="model">A model to pass into the partial view.</param>
            <param name="viewData">A <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> to pass into the partial view.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that on completion returns a new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing
            the created HTML.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Password(System.String,System.Object,System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "password" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">If non-<c>null</c>, value to include in the element.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item><paramref name="value"/> if non-<c>null</c>.</item>
            <item>Existing "value" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.RadioButton(System.String,System.Object,System.Nullable{System.Boolean},System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "radio" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">
            If non-<c>null</c>, value to include in the element. Must not be <c>null</c> if
            <paramref name="isChecked"/> is also <c>null</c> and no "checked" entry exists in
            <paramref name="htmlAttributes"/>.
            </param>
            <param name="isChecked">
            If <c>true</c>, radio button is initially selected. Must not be <c>null</c> if
            <paramref name="value"/> is also <c>null</c> and no "checked" entry exists in
            <paramref name="htmlAttributes"/>.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item><paramref name="value"/> if non-<c>null</c>.</item>
            <item>Existing "value" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            <para>Determines &lt;input&gt; element's "checked" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item><paramref name="isChecked"/> if non-<c>null</c>.</item>
            <item>Existing "checked" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>
            <see cref="P:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ViewData"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, does not include a "checked" attribute.</item>
            </list>
            <para>
            In all but the <paramref name="htmlAttributes"/> and default cases, includes a "checked" attribute with
            value "checked" if the <see cref="T:System.String"/> values is equal to a converted <see cref="T:System.String"/> for
            <paramref name="value"/> or <paramref name="isChecked"/> is <c>true</c> (for that case); does not include
            the attribute otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Raw(System.String)">
            <summary>
            Wraps HTML markup in an <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/>, without HTML-encoding the specified
            <paramref name="value"/>.
            </summary>
            <param name="value">HTML markup <see cref="T:System.String"/>.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the wrapped <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Raw(System.Object)">
            <summary>
            Wraps HTML markup from the string representation of an <see cref="T:System.Object"/> in an
            <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/>, without HTML-encoding the string representation.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to wrap.</param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the wrapped string representation.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.RenderPartialAsync(System.String,System.Object,Microsoft.AspNet.Mvc.ViewDataDictionary)">
            <summary>
            Renders HTML markup for the specified partial view.
            </summary>
            <param name="partialViewName">
            The name of the partial view used to create the HTML markup. Must not be <c>null</c>.
            </param>
            <param name="model">A model to pass into the partial view.</param>
            <param name="viewData">A <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> to pass into the partial view.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that renders the created HTML when it executes.</returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.RouteLink(System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Returns an anchor (&lt;a&gt;) element that contains a URL path to the specified route.
            </summary>
            <param name="linkText">The inner text of the anchor element. Must not be <c>null</c>.</param>
            <param name="routeName">The name of the route.</param>
            <param name="protocol">The protocol for the URL, such as &quot;http&quot; or &quot;https&quot;.</param>
            <param name="hostName">The host name for the URL.</param>
            <param name="fragment">The URL fragment name (the anchor name).</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route parameters.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the anchor element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.TextArea(System.String,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            Returns a &lt;textarea&gt; element for the specified expression <paramref name="name"/>.
            </summary>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">If non-<c>null</c>, value to include in the element.</param>
            <param name="rows">Number of rows in the textarea.</param>
            <param name="columns">Number of columns in the textarea.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;textarea&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;textarea&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;textarea&gt; element's content based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item><paramref name="value"/> if non-<c>null</c>.</item>
            <item>
            <see cref="P:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ViewData"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.TextBox(System.String,System.Object,System.String,System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "text" for the specified expression <paramref name="name"/>.
            </summary>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="value">If non-<c>null</c>, value to include in the element.</param>
            <param name="format">
            The composite format <see cref="T:System.String"/> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and <paramref name="name"/> to set
            &lt;input&gt; element's "name" attribute. Sanitizes <paramref name="name"/> to set element's "id"
            attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for <paramref name="name"/> (converted to a fully-qualified name)
            if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="value"/> if non-<c>null</c>. Formats <paramref name="value"/> using
            <paramref name="format"/> or converts <paramref name="value"/> to a <see cref="T:System.String"/> directly if
            <paramref name="format"/> is <c>null</c> or empty.
            </item>
            <item>
            <see cref="P:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ViewData"/> entry for <paramref name="name"/> (converted to a fully-qualified name) if entry
            exists and can be converted to a <see cref="T:System.String"/>. Formats entry using <paramref name="format"/> or
            converts entry to a <see cref="T:System.String"/> directly if <paramref name="format"/> is <c>null</c> or empty.
            </item>
            <item>
            Linq expression based on <paramref name="name"/> (converted to a fully-qualified name) run against current
            model if result is non-<c>null</c> and can be converted to a <see cref="T:System.String"/>. For example
            <c>string.Empty</c> identifies the current model and <c>"prop"</c> identifies the current model's "prop"
            property. Formats result using <paramref name="format"/> or converts result to a <see cref="T:System.String"/>
            directly if <paramref name="format"/> is <c>null</c> or empty.
            </item>
            <item>Existing "value" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ValidationMessage(System.String,System.String,System.Object,System.String)">
            <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object
            for the specified expression <paramref name="modelName"/>.
            </summary>
            <param name="modelName">Expression name, relative to the current model.</param>
            <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object. Message will always be visible but client-side validation may
            update the associated CSS class.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the <paramref name="tag"/> element.
            Alternatively, an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <param name="tag">
            The tag to wrap the <paramref name="message"/> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/>.
            </param>
            <returns>
            A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a <paramref name="tag"/> element. <c>null</c> if the
            expression <paramref name="modelName"/> is valid and client-side validation is disabled.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.ValidationSummary(System.Boolean,System.String,System.Object,System.String)">
            <summary>
            Returns an unordered list (&lt;ul&gt; element) of validation messages that are in the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object.
            </summary>
            <param name="excludePropertyErrors">
            If <c>true</c>, display model-level errors only; otherwise display all errors.
            </param>
            <param name="message">The message to display with the validation summary.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the topmost (&lt;div&gt;) element.
            Alternatively, an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <param name="tag">
            The tag to wrap the <paramref name="message"/> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationSummaryMessageElement" />.
            </param>
            <returns>
            New <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing a &lt;div&gt; element wrapping the <paramref name="tag"/> element
            and the &lt;ul&gt; element. <see cref="P:Microsoft.AspNet.Mvc.Rendering.HtmlString.Empty"/> if the current model is valid and client-side
            validation is disabled).
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper.Value(System.String,System.String)">
            <summary>
            Returns the formatted value for the specified expression <paramref name="name"/>.
            </summary>
            <param name="name">Expression name, relative to the current model.</param>
            <param name="format">
            The composite format <see cref="T:System.String"/> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            </param>
            <returns>A <see cref="T:System.String"/> containing the formatted value.</returns>
            <remarks>
            Converts the expression result to a <see cref="T:System.String"/> directly if
            <paramref name="format"/> is <c>null</c> or empty.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1">
            <summary>
            An <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> for Linq expressions.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.ViewData">
            <summary>
            Gets the current view data.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.CheckBoxFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "checkbox" with value "true" and an &lt;input&gt; element of type
            "hidden" with value "false".
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the checkbox element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; elements.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set checkbox element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set checkbox element's "id" attribute.
            </para>
            <para>Determines checkbox element's "checked" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for the string representation of the
            <paramref name="expression"/> if entry exists and can be converted to a <see cref="T:System.Boolean"/>.
            </item>
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a
            <see cref="T:System.Boolean"/>.
            </item>
            <item>Existing "checked" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, does not include a "checked" attribute.</item>
            </list>
            <para>
            In all but the <paramref name="htmlAttributes"/> case, includes a "checked" attribute with value "checked"
            if the <see cref="T:System.Boolean"/> values is <c>true</c>; does not include the attribute otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.DisplayFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String,System.Object)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using a display template, specified HTML field
            name, and additional view data. The template is found using the <paramref name="templateName"/> or the
            <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="templateName">The name of the template used to create the HTML markup.</param>
            <param name="htmlFieldName">
            A <see cref="T:System.String"/> used to disambiguate the names of HTML elements that are created for properties
            that have the same name.
            </param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/> that can contain additional
            view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/> instance created for the
            template.
            </param>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the created HTML.</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> display template includes markup for each property in the
            <paramref name="expression"/> result.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.DisplayNameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the display name for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A <see cref="T:System.String"/> containing the display name.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.DisplayNameForInnerType``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the display name for the specified <paramref name="expression"/>
            if the current model represents a collection.
            </summary>
            <param name="expression">An expression to be evaluated against an item in the current model.</param>
            <typeparam name="TModelItem">The type of items in the model collection.</typeparam>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A <see cref="T:System.String"/> containing the display name.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.DisplayTextFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the simple display text for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>
            A <see cref="T:System.String"/> containing the simple display text.
            If the <paramref name="expression"/> result is <c>null</c>, returns
            <see cref="P:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata.NullDisplayText"/>.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.DropDownListFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem},System.String,System.Object)">
            <summary>
            Returns a single-selection HTML &lt;select&gt; element for the <paramref name="expression"/>, using the
            specified list items, option label, and HTML attributes.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
            <param name="optionLabel">
            The text for a default empty item. Does not include such an item if argument is <c>null</c>.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the &lt;select&gt; element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;select&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.EditorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String,System.Object)">
            <summary>
            Returns HTML markup for the <paramref name="expression"/>, using an editor template, specified HTML field
            name, and additional view data. The template is found using the <paramref name="templateName"/> or the
            <paramref name="expression"/>'s <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="templateName">The name of the template that is used to create the HTML markup.</param>
            <param name="htmlFieldName">
            A <see cref="T:System.String"/> used to disambiguate the names of HTML elements that are created for properties
            that have the same name.
            </param>
            <param name="additionalViewData">
            An anonymous <see cref="T:System.Object"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/> that can contain additional
            view data that will be merged into the <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary`1"/> instance created for the
            template.
            </param>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element(s).</returns>
            <remarks>
            For example the default <see cref="T:System.Object"/> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression"/> result.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.HiddenFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "hidden" for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;input&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for the string representation of the
            <paramref name="expression"/> if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a
            <see cref="T:System.String"/>.
            </item>
            <item>Existing "value" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.IdFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the HTML element Id for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A <see cref="T:System.String"/> containing the element Id.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.LabelFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object)">
            <summary>
            Returns a &lt;label&gt; element for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="labelText">The inner text of the element.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <typeparam name="TValue">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;label&gt; element.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.ListBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem},System.Object)">
            <summary>
            Returns a multi-selection &lt;select&gt; element for the <paramref name="expression"/>, using the
            specified list items and HTML attributes.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the &lt;select&gt; element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;select&gt; element.</returns>
            <remarks>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;select&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.NameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the full HTML element name for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A <see cref="T:System.String"/> containing the element name.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.PasswordFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "password" for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;input&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a
            <see cref="T:System.String"/>.
            </item>
            <item>Existing "value" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.RadioButtonFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "radio" for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="value">Value to include in the element. Must not be <c>null</c>.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;select&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute. Converts the
            <paramref name="value"/> to a <see cref="T:System.String"/> to set element's "value" attribute.
            </para>
            <para>Determines &lt;input&gt; element's "checked" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for the string representation of the
            <paramref name="expression"/> if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a <see cref="T:System.String"/>.
            </item>
            <item>Existing "checked" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, does not include a "checked" attribute.</item>
            </list>
            <para>
            In all but the <paramref name="htmlAttributes"/> and default cases, includes a "checked" attribute with
            value "checked" if the <see cref="T:System.String"/> values is equal to a converted <see cref="T:System.String"/> for
            <paramref name="value"/>; does not include the attribute otherwise.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.TextAreaFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,System.Object)">
            <summary>
            Returns a &lt;textarea&gt; element for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="rows">Number of rows in the textarea.</param>
            <param name="columns">Number of columns in the textarea.</param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;textarea&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;textarea&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </para>
            <para>Determines &lt;textarea&gt; element's content based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for the string representation of the
            <paramref name="expression"/> if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a <see cref="T:System.String"/>.
            </item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.TextBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object)">
            <summary>
            Returns an &lt;input&gt; element of type "text" for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="format">
            The composite format <see cref="T:System.String"/> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the &lt;input&gt; element.</returns>
            <remarks>
            <para>
            Combines <see cref="P:Microsoft.AspNet.Mvc.TemplateInfo.HtmlFieldPrefix"/> and the string representation of the
            <paramref name="expression"/> to set &lt;input&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression"/> to set element's "id" attribute.
            </para>
            <para>Determines &lt;input&gt; element's "value" attribute based on the following precedence:</para>
            <list type="number">
            <item>
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> entry for the string representation of the
            <paramref name="expression"/> if entry exists and can be converted to a <see cref="T:System.String"/>.
            </item>
            <item>
            <paramref name="expression"/> result if it is non-<c>null</c> and can be parsed as a <see cref="T:System.String"/>.
            Formats result using <paramref name="format"/> or converts result to a <see cref="T:System.String"/> directly if
            <paramref name="format"/> is <c>null</c> or empty.
            </item>
            <item>Existing "value" entry in <paramref name="htmlAttributes"/> if any.</item>
            <item>Otherwise, <c>string.Empty</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.ValidationMessageFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object,System.String)">
            <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/>
            object for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNet.Mvc.ModelBinding.ModelStateDictionary"/> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
            <param name="htmlAttributes">
            An <see cref="T:System.Object"/> that contains the HTML attributes for the <paramref name="tag"/> element.
            Alternatively, an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the HTML attributes.
            </param>
            <param name="tag">
            The tag to wrap the <paramref name="message"/> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNet.Mvc.ViewContext.ValidationMessageElement"/>.
            </param>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>
            A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlString"/> containing the <paramref name="tag"/> element. <c>null</c> if the
            <paramref name="expression"/> is valid and client-side validation is disabled.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper`1.ValueFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Returns the formatted value for the specified <paramref name="expression"/>.
            </summary>
            <param name="expression">An expression to be evaluated against the current model.</param>
            <param name="format">
            The composite format <see cref="T:System.String"/> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
            </param>
            <typeparam name="TProperty">The type of the <paramref name="expression"/> result.</typeparam>
            <returns>A <see cref="T:System.String"/> containing the formatted value.</returns>
            <remarks>
            Converts the <paramref name="expression"/> result to a <see cref="T:System.String"/> directly if
            <paramref name="format"/> is <c>null</c> or empty.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.ModelExpression">
            <summary>
            Describes an <see cref="T:System.Linq.Expressions.Expression"/> passed to a tag helper.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.ModelExpression.#ctor(System.String,Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.Rendering.ModelExpression"/> class.
            </summary>
            <param name="name">
            String representation of the <see cref="T:System.Linq.Expressions.Expression"/> of interest.
            </param>
            <param name="metadata">
            Metadata about the <see cref="T:System.Linq.Expressions.Expression"/> of interest.
            </param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.ModelExpression.Name">
            <summary>
            String representation of the <see cref="T:System.Linq.Expressions.Expression"/> of interest.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.ModelExpression.Metadata">
            <summary>
            Metadata about the <see cref="T:System.Linq.Expressions.Expression"/> of interest.
            </summary>
            <remarks>
            Getting <see cref="P:Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata.Model"/> will evaluate a compiled version of the original
            <see cref="T:System.Linq.Expressions.Expression"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Collections.IEnumerable,System.String)">
            <summary>
            Initializes a new instance of the MultiSelectList class by using the items to include in the list,
            the data value field, the data text field, the selected values, and the data group field.
            </summary>
            <param name="items">The items used to build each <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> of the list.</param>
            <param name="dataValueField">The data value field. Used to match the Value property of the corresponding
            <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/>.</param>
            <param name="dataTextField">The data text field. Used to match the Text property of the corresponding
            <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/>.</param>
            <param name="selectedValues">The selected values field. Used to match the Selected property of the
            corresponding <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/>.</param>
            <param name="dataGroupField">The data group field. Used to match the Group property of the corresponding
            <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/>.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.MultiSelectList.DataGroupField">
            <summary>
            Gets or sets the data group field.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.MvcForm.EndForm">
            <summary>
            Renders the &lt;/form&gt; end tag to the response.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the SelectList class by using the specified items for the list,
            the data value field, the data text field, a selected value, and the data group field.
            </summary>
            <param name="items">The items used to build each <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> of the list.</param>
            <param name="dataValueField">The data value field. Used to match the Value property of the corresponding
            <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/>.</param>
            <param name="dataTextField">The data text field. Used to match the Text property of the corresponding
            <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/>.</param>
            <param name="selectedValue">The selected values. Used to match the Selected property of the corresponding
            <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/>.</param>
            <param name="dataGroupField">The data group field. Used to match the Group property of the corresponding
            <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/>.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.SelectListGroup">
            <summary>
            Represents the optgroup HTML element and its attributes.
            In a select list, multiple groups with the same name are supported.
            They are compared with reference equality.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.SelectListGroup.Disabled">
            <summary>
            Gets or sets a value that indicates whether this <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListGroup"/> is disabled.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.SelectListGroup.Name">
            <summary>
            Represents the value of the optgroup's label.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.SelectListItem.Disabled">
            <summary>
            Gets or sets a value that indicates whether this <see cref="T:Microsoft.AspNet.Mvc.Rendering.SelectListItem"/> is disabled.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.SelectListItem.Group">
            <summary>
            Represents the optgroup HTML element this item is wrapped into.
            In a select list, multiple groups with the same name are supported.
            They are compared with reference equality.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter">
            <summary>
            A <see cref="T:System.IO.TextWriter"/> that represents individual write operations as a sequence of strings.
            </summary>
            <remarks>
            This is primarily designed to avoid creating large in-memory strings.
            Refer to https://aspnetwebstack.codeplex.com/workitem/585 for more details.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter"/>.
            </summary>
            <param name="encoding">The character <see cref="P:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.Encoding"/> in which the output is written.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.Encoding">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.Buffer">
            <summary>
            A collection of entries buffered by this instance of <see cref="T:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.Write(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.WriteAsync(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.WriteAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.WriteLine">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.WriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.WriteLineAsync(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.WriteLineAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.WriteLineAsync">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.CopyTo(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.CopyToAsync(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.StringCollectionTextWriter.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.Expressions.ViewDataInfo.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.Rendering.Expressions.ViewDataInfo"/> class with info about a
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> lookup which has already been evaluated.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.Expressions.ViewDataInfo.#ctor(System.Object,System.Reflection.PropertyInfo,System.Func{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.Rendering.Expressions.ViewDataInfo"/> class with info about a
            <see cref="T:Microsoft.AspNet.Mvc.ViewDataDictionary"/> lookup which is evaluated when <see cref="P:Microsoft.AspNet.Mvc.Rendering.Expressions.ViewDataInfo.Value"/> is read.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.#ctor(Microsoft.AspNet.Mvc.IActionBindingContextProvider,Microsoft.AspNet.Mvc.AntiForgery,Microsoft.AspNet.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNet.Mvc.IUrlHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.IdAttributeDotReplacement">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.Encode(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.Encode(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.FormatValue(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateActionLink(System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateAntiForgery(Microsoft.AspNet.Mvc.ViewContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateCheckBox(Microsoft.AspNet.Mvc.ViewContext,Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String,System.Nullable{System.Boolean},System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateHiddenForCheckbox(Microsoft.AspNet.Mvc.ViewContext,Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateForm(Microsoft.AspNet.Mvc.ViewContext,System.String,System.String,System.Object,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateHidden(Microsoft.AspNet.Mvc.ViewContext,Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String,System.Object,System.Boolean,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateLabel(Microsoft.AspNet.Mvc.ViewContext,Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GeneratePassword(Microsoft.AspNet.Mvc.ViewContext,Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateRadioButton(Microsoft.AspNet.Mvc.ViewContext,Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String,System.Object,System.Nullable{System.Boolean},System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateRouteLink(System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateSelect(Microsoft.AspNet.Mvc.ViewContext,Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem},System.Boolean,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateTextArea(Microsoft.AspNet.Mvc.ViewContext,Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String,System.Int32,System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateTextBox(Microsoft.AspNet.Mvc.ViewContext,Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String,System.Object,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateValidationMessage(Microsoft.AspNet.Mvc.ViewContext,System.String,System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateValidationSummary(Microsoft.AspNet.Mvc.ViewContext,System.Boolean,System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GetClientValidationRules(Microsoft.AspNet.Mvc.ViewContext,Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.DefaultHtmlGenerator.GenerateOption(Microsoft.AspNet.Mvc.Rendering.SelectListItem,System.String)">
            <remarks>
            Not used directly in HtmlHelper. Exposed for use in DefaultDisplayTemplates.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelper">
            <summary>
            Default implementation of <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.#ctor(Microsoft.AspNet.Mvc.Rendering.IHtmlGenerator,Microsoft.AspNet.Mvc.Rendering.ICompositeViewEngine,Microsoft.AspNet.Mvc.ModelBinding.IModelMetadataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelper"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.Html5DateRenderingMode">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.IdAttributeDotReplacement">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.ViewContext">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.ViewBag">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.ViewData">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.MetadataProvider">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.ObjectToDictionary(System.Object)">
             <summary>
             Creates a dictionary from an object, by adding each public instance property as a key with its associated
             value to the dictionary. It will expose public properties from derived types as well. This is typically
             used with objects of an anonymous type.
            
             If the object is already an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance, then it is
             returned as-is.
             <example>
             <c>new { data_name="value" }</c> will translate to the entry <c>{ "data_name", "value" }</c>
             in the resulting dictionary.
             </example>
             </summary>
             <param name="obj">The object to be converted.</param>
             <returns>The created dictionary of property names and property values.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.AnonymousObjectToHtmlAttributes(System.Object)">
             <summary>
             Creates a dictionary of HTML attributes from the input object,
             translating underscores to dashes in each public instance property.
            
             If the object is already an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance, then it is
             returned as-is.
             <example>
             <c>new { data_name="value" }</c> will translate to the entry <c>{ "data-name", "value" }</c>
             in the resulting dictionary.
             </example>
             </summary>
             <param name="htmlAttributes">Anonymous object describing HTML attributes.</param>
             <returns>A dictionary that represents HTML attributes.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.ActionLink(System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.AntiForgeryToken">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.BeginForm(System.String,System.String,System.Object,Microsoft.AspNet.Mvc.Rendering.FormMethod,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.EndForm">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.CheckBox(System.String,System.Nullable{System.Boolean},System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.Encode(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.Encode(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.FormatValue(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.GenerateIdFromName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.Display(System.String,System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.DisplayName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.DisplayText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.DropDownList(System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem},System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.Editor(System.String,System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.Hidden(System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.Id(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.Label(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.ListBox(System.String,System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem},System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.Name(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.PartialAsync(System.String,System.Object,Microsoft.AspNet.Mvc.ViewDataDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.RenderPartialAsync(System.String,System.Object,Microsoft.AspNet.Mvc.ViewDataDictionary)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.Password(System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.RadioButton(System.String,System.Object,System.Nullable{System.Boolean},System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.Raw(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.Raw(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.RouteLink(System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.ValidationMessage(System.String,System.String,System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.ValidationSummary(System.Boolean,System.String,System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.GetFormMethodString(Microsoft.AspNet.Mvc.Rendering.FormMethod)">
            <summary>
            Returns the HTTP method that handles form input (GET or POST) as a string.
            </summary>
            <param name="method">The HTTP method that handles the form.</param>
            <returns>The form method string, either "get" or "post".</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.TextArea(System.String,System.String,System.Int32,System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.TextBox(System.String,System.Object,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.Value(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.CreateForm">
            <summary>
            Override this method to return an <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> subclass. That subclass may change
            <see cref="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.EndForm"/> behavior.
            </summary>
            <returns>A new <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> instance.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.GenerateForm(System.String,System.String,System.Object,Microsoft.AspNet.Mvc.Rendering.FormMethod,System.Object)">
            <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form,
            the request will be processed by an action method.
            </summary>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route parameters.
            </param>
            <param name="method">The HTTP method for processing the form, either GET or POST.</param>
            <param name="htmlAttributes">An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing HTML
            attributes to set for the element.</param>
            <returns>
            An <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> instance which emits the &lt;/form&gt; end tag when disposed.
            </returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper.GetClientValidationRules(Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.#ctor(Microsoft.AspNet.Mvc.Rendering.IHtmlGenerator,Microsoft.AspNet.Mvc.Rendering.ICompositeViewEngine,Microsoft.AspNet.Mvc.ModelBinding.IModelMetadataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.ViewData">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.CheckBoxFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.DropDownListFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem},System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.DisplayFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.DisplayNameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.DisplayNameForInnerType``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.DisplayTextFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.EditorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.HiddenFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.IdFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.LabelFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.ListBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Rendering.SelectListItem},System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.NameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.PasswordFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.RadioButtonFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.TextAreaFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.TextBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.ValidationMessageFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.HtmlHelper`1.ValueFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.IHtmlGenerator">
            <summary>
            Contract for a service supporting <see cref="T:Microsoft.AspNet.Mvc.Rendering.IHtmlHelper"/> and <c>ITagHelper</c> implementations.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlGenerator.GenerateHiddenForCheckbox(Microsoft.AspNet.Mvc.ViewContext,Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String)">
            <summary>
            Generate an additional &lt;input type="hidden".../&gt; for checkboxes. This addresses scenarios where
            unchecked checkboxes are not sent in the request. Sending a hidden input makes it possible to know that the
            checkbox was present on the page when the request was submitted.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlGenerator.GenerateForm(Microsoft.AspNet.Mvc.ViewContext,System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            Renders a &lt;form&gt; start tag to the response. When the user submits the form,
            the request will be processed by an action method.
            </summary>
            <param name="actionName">The name of the action method.</param>
            <param name="controllerName">The name of the controller.</param>
            <param name="routeValues">
            An <see cref="T:System.Object"/> that contains the parameters for a route. The parameters are retrieved through
            reflection by examining the properties of the <see cref="T:System.Object"/>. This <see cref="T:System.Object"/> is typically
            created using <see cref="T:System.Object"/> initializer syntax. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing the route parameters.
            </param>
            <param name="method">The HTTP method for processing the form, either GET or POST.</param>
            <param name="htmlAttributes">An <see cref="T:System.Collections.Generic.IDictionary`2"/> instance containing HTML
            attributes to set for the element.</param>
            <returns>
            An <see cref="T:Microsoft.AspNet.Mvc.Rendering.MvcForm"/> instance which emits the &lt;/form&gt; end tag when disposed.
            </returns>
            <remarks>
            In this context, "renders" means the method writes its output using <see cref="P:Microsoft.AspNet.Mvc.ViewContext.Writer"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IHtmlGenerator.GetClientValidationRules(Microsoft.AspNet.Mvc.ViewContext,Microsoft.AspNet.Mvc.ModelBinding.ModelMetadata,System.String)">
            <remarks>
            Not used directly in HtmlHelper. Exposed publicly for use in other IHtmlHelper implementations.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.TagBuilder.CreateSanitizedId(System.String,System.String)">
            <summary>
            Return valid HTML 4.01 "id" attribute for an element with the given <paramref name="name"/>.
            </summary>
            <param name="name">The original element name.</param>
            <param name="invalidCharReplacement">
            The <see cref="T:System.String"/> (normally a single <see cref="T:System.Char"/>) to substitute for invalid characters in
            <paramref name="name"/>.
            </param>
            <returns>
            Valid HTML 4.01 "id" attribute for an element with the given <paramref name="name"/>.
            </returns>
            <remarks>Valid "id" attributes are defined in http://www.w3.org/TR/html401/types.html#type-id</remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.CompositeViewEngine">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.CompositeViewEngine.ViewEngines">
            <summary>
            Gets the list of ViewEngines the CompositeViewEngine delegates to.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.CompositeViewEngine.FindPartialView(Microsoft.AspNet.Mvc.ActionContext,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.CompositeViewEngine.FindView(Microsoft.AspNet.Mvc.ActionContext,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.ICompositeViewEngine">
            <summary>
            Represents an <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/> that delegates to one of a collection of view engines.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine">
            <summary>
            Defines the contract for a view engine.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IViewEngine.FindView(Microsoft.AspNet.Mvc.ActionContext,System.String)">
            <summary>
            Finds the specified view by using the specified action context.
            </summary>
            <param name="context">The action context.</param>
            <param name="viewName">The name or full path to the view.</param>
            <returns>A result representing the result of locating the view.</returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Rendering.IViewEngine.FindPartialView(Microsoft.AspNet.Mvc.ActionContext,System.String)">
            <summary>
            Finds the specified partial view by using the specified action context.
            </summary>
            <param name="context">The action context.</param>
            <param name="viewName">The name or full path to the view.</param>
            <returns>A result representing the result of locating the view.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Rendering.IViewEngineProvider">
            <summary>
            Provides an activated collection of <see cref="T:Microsoft.AspNet.Mvc.Rendering.IViewEngine"/> instances.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Rendering.IViewEngineProvider.ViewEngines">
            <summary>
            Gets a collection of activated IViewEngine instances.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Routing.ActionSelectionDecisionTree">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Routing.ActionSelectionDecisionTree.#ctor(Microsoft.AspNet.Mvc.ActionDescriptorsCollection)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.Routing.ActionSelectionDecisionTree"/>.
            </summary>
            <param name="actions">The <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptorsCollection"/>.</param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.ActionSelectionDecisionTree.Version">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Routing.ActionSelectionDecisionTree.Select(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Routing.ActionSelectorDecisionTreeProvider">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Routing.ActionSelectorDecisionTreeProvider.#ctor(Microsoft.AspNet.Mvc.IActionDescriptorsCollectionProvider)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.Routing.ActionSelectorDecisionTreeProvider"/>.
            </summary>
            <param name="actionDescriptorsCollectionProvider">
            The <see cref="T:Microsoft.AspNet.Mvc.IActionDescriptorsCollectionProvider"/>.
            </param>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.ActionSelectorDecisionTreeProvider.DecisionTree">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Routing.AttributeRoute">
            <summary>
            An <see cref="T:Microsoft.AspNet.Routing.IRouter"/> implementation for attribute routing.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Routing.AttributeRoute.#ctor(Microsoft.AspNet.Routing.IRouter,System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Routing.AttributeRouteMatchingEntry},System.Collections.Generic.IEnumerable{Microsoft.AspNet.Mvc.Routing.AttributeRouteLinkGenerationEntry},Microsoft.Framework.Logging.ILoggerFactory)">
            <summary>
            Creates a new <see cref="T:Microsoft.AspNet.Mvc.Routing.AttributeRoute"/>.
            </summary>
            <param name="next">The next router. Invoked when a route entry matches.</param>
            <param name="entries">The set of route entries.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Routing.AttributeRoute.RouteAsync(Microsoft.AspNet.Routing.RouteContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Routing.AttributeRoute.GetVirtualPath(Microsoft.AspNet.Routing.VirtualPathContext)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Routing.AttributeRouteInfo">
            <summary>
            Represents the routing information for an action that is attribute routed.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteInfo.Template">
            <summary>
            The route template. May be null if the action has no attribute routes.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteInfo.Order">
            <summary>
            Gets the order of the route associated with a given action. This property determines
            the order in which routes get executed. Routes with a lower order value are tried first. In case a route 
            doesn't specify a value, it gets a default order of 0.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteInfo.Name">
            <summary>
            Gets the name of the route associated with a given action. This property can be used
            to generate a link by referring to the route by name instead of attempting to match a
            route by provided route data.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Routing.AttributeRouteLinkGenerationEntry">
            <summary>
            Used to build an <see cref="T:Microsoft.AspNet.Mvc.Routing.AttributeRoute"/>. Represents an individual URL-generating route that will be
            aggregated into the <see cref="T:Microsoft.AspNet.Mvc.Routing.AttributeRoute"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteLinkGenerationEntry.Binder">
            <summary>
            The <see cref="T:Microsoft.AspNet.Routing.Template.TemplateBinder"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteLinkGenerationEntry.Constraints">
            <summary>
            The route constraints.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteLinkGenerationEntry.Defaults">
            <summary>
            The route defaults.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteLinkGenerationEntry.Order">
            <summary>
            The order of the template.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteLinkGenerationEntry.Precedence">
            <summary>
            The precedence of the template.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteLinkGenerationEntry.Name">
            <summary>
            The name of the route.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteLinkGenerationEntry.RouteGroup">
            <summary>
            The route group.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteLinkGenerationEntry.RequiredLinkValues">
            <summary>
            The set of values that must be present for link genration.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteLinkGenerationEntry.Template">
            <summary>
            The <see cref="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteLinkGenerationEntry.Template"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteLinkGenerationEntry.TemplateText">
            <summary>
            The original <see cref="T:System.String"/> representing the route template.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Routing.AttributeRouteMatchingEntry">
            <summary>
            Used to build an <see cref="T:Microsoft.AspNet.Mvc.Routing.AttributeRoute"/>. Represents an individual URL-matching route that will be
            aggregated into the <see cref="T:Microsoft.AspNet.Mvc.Routing.AttributeRoute"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteMatchingEntry.Order">
            <summary>
            The order of the template.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteMatchingEntry.Precedence">
            <summary>
            The precedence of the template.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.AttributeRouteMatchingEntry.Route">
            <summary>
            The <see cref="T:Microsoft.AspNet.Routing.Template.TemplateRoute"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Routing.AttributeRoutePrecedence">
            <summary>
            Computes precedence for an attribute route template.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Routing.AttributeRouting.CreateAttributeMegaRoute(Microsoft.AspNet.Routing.IRouter,System.IServiceProvider)">
            <summary>
            Creates an attribute route using the provided services and provided target router.
            </summary>
            <param name="target">The router to invoke when a route entry matches.</param>
            <param name="services">The application services.</param>
            <returns>An attribute route.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Routing.IActionSelectionDecisionTree">
            <summary>
            A data structure that retrieves a list of <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptor"/> matches based on the values
            supplied for the current request by <see cref="P:Microsoft.AspNet.Routing.RouteData.Values"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.IActionSelectionDecisionTree.Version">
            <summary>
            Gets the version. The same as the value of <see cref="P:Microsoft.AspNet.Mvc.ActionDescriptorsCollection.Version"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Routing.IActionSelectionDecisionTree.Select(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Retrieves a set of <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptor"/> based on the route values supplied by
            <paramref name="routeValues"/>/
            </summary>
            <param name="routeValues">The route values for the current request.</param>
            <returns>A set of <see cref="T:Microsoft.AspNet.Mvc.ActionDescriptor"/> matching the route values.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Routing.IActionSelectorDecisionTreeProvider">
            <summary>
            Stores an <see cref="T:Microsoft.AspNet.Mvc.Routing.ActionSelectionDecisionTree"/> for the current value of 
            <see cref="P:Microsoft.AspNet.Mvc.IActionDescriptorsCollectionProvider.ActionDescriptors"/>.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.IActionSelectorDecisionTreeProvider.DecisionTree">
            <summary>
            Gets the <see cref="T:Microsoft.AspNet.Mvc.IActionDescriptorsCollectionProvider"/>.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Routing.IRouteTemplateProvider">
            <summary>
            Interface for attributes which can supply a route template for attribute routing.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.IRouteTemplateProvider.Template">
            <summary>
            The route template. May be null.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.IRouteTemplateProvider.Order">
            <summary>
            Gets the route order. The order determines the order of route execution. Routes with a lower
            order value are tried first. When a route doesn't specify a value, it gets a default value of 0.
            A null value for the Order property means that the user didn't specify an explicit order for the
            route.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.Mvc.Routing.IRouteTemplateProvider.Name">
            <summary>
            Gets the route name. The route name can be used to generate a link using a specific route, instead
             of relying on selection of a route based on the given set of route values.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.Routing.RouteValueEqualityComparer">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation that compares objects as-if
            they were route value strings.
            </summary>
            <remarks>
            Values that are are not strings are converted to strings using 
            <c>Convert.ToString(x, CultureInfo.InvariantCulture)</c>. <c>null</c> values are converted
            to the empty string.
            
            strings are compared using <see cref="F:System.StringComparison.OrdinalIgnoreCase"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Routing.RouteValueEqualityComparer.Equals(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.Routing.RouteValueEqualityComparer.GetHashCode(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.DefaultViewComponentActivator">
            <summary>
            Represents the <see cref="T:Microsoft.AspNet.Mvc.IViewComponentActivator"/> that is registered by default.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DefaultViewComponentActivator.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.AspNet.Mvc.DefaultViewComponentActivator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DefaultViewComponentActivator.Activate(System.Object,Microsoft.AspNet.Mvc.ViewContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.AspNet.Mvc.DefaultViewComponentActivator.CreateValueAccessorLookup">
            <summary>
            Creates a lookup dictionary for the values to be activated.
            </summary>
            <returns>Returns a readonly dictionary of the values corresponding to the types.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IViewComponentActivator">
            <summary>
            Provides methods to activate an instantiated ViewComponent
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IViewComponentActivator.Activate(System.Object,Microsoft.AspNet.Mvc.ViewContext)">
            <summary>
            When implemented in a type, activates an instantiated ViewComponent.
            </summary>
            <param name="viewComponent">The ViewComponent to activate.</param>
            <param name="context">The <see cref="T:Microsoft.AspNet.Mvc.ViewContext"/> for the executing <see cref="T:Microsoft.AspNet.Mvc.ViewComponent"/>.</param>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.IViewComponentResult">
            <summary>
            Result type of a <see cref="T:Microsoft.AspNet.Mvc.ViewComponent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IViewComponentResult.Execute(Microsoft.AspNet.Mvc.ViewComponentContext)">
            <summary>
            Executes the result of a <see cref="T:Microsoft.AspNet.Mvc.ViewComponent"/> using the specified <paramref name="context"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNet.Mvc.ViewComponentContext"/> for the current component execution.</param>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.IViewComponentResult.ExecuteAsync(Microsoft.AspNet.Mvc.ViewComponentContext)">
            <summary>
            Asynchronously executes the result of a <see cref="T:Microsoft.AspNet.Mvc.ViewComponent"/> using the specified
            <paramref name="context"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNet.Mvc.ViewComponentContext"/> for the current component execution.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous execution.</returns>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.ViewViewComponentResult">
            <summary>
            A <see cref="T:Microsoft.AspNet.Mvc.IViewComponentResult"/> that renders a partial view when executed.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ViewViewComponentResult.Execute(Microsoft.AspNet.Mvc.ViewComponentContext)">
            <summary>
            Locates and renders a view specified by <paramref name="context"/>.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNet.Mvc.ViewComponentContext"/> for the current component execution.</param>
            <remarks>
            This method synchronously calls and blocks on <see cref="M:Microsoft.AspNet.Mvc.ViewViewComponentResult.ExecuteAsync(Microsoft.AspNet.Mvc.ViewComponentContext)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.ViewViewComponentResult.ExecuteAsync(Microsoft.AspNet.Mvc.ViewComponentContext)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.AspNet.Mvc.CopyOnWriteDictionary`2">
            <summary>
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> that defers creating a shallow copy of the source dictionary until
             a mutative operation has been performed on it.
            </summary>
        </member>
        <member name="F:Microsoft.AspNet.Mvc.Encodings.UTF8EncodingWithoutBOM">
            <summary>
            Returns UTF8 Encoding without BOM and throws on invalid bytes.
            </summary>
        </member>
        <member name="F:Microsoft.AspNet.Mvc.Encodings.UTF16EncodingLittleEndian">
            <summary>
            Returns UTF16 Encoding which uses littleEndian byte order with BOM and throws on invalid bytes.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.PropertyActivator`1.GetPropertiesToActivate(System.Type,System.Type,System.Func{System.Reflection.PropertyInfo,Microsoft.AspNet.Mvc.PropertyActivator{`0}})">
            <summary>
            Returns a list of properties on a type that are decorated with
            the specified activateAttributeType and have setters.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.PropertyHelper.#ctor(System.Reflection.PropertyInfo)">
             <summary>
             Initializes a fast property helper.
            
             This constructor does not cache the helper. For caching, use GetProperties.
             </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.PropertyHelper.GetProperties(System.Object)">
            <summary>
            Creates and caches fast property helpers that expose getters for every public get property on the
            underlying type.
            </summary>
            <param name="instance">the instance to extract property accessors for.</param>
            <returns>a cached array of all public property getters from the underlying type of target instance.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.PropertyHelper.GetProperties(System.Type)">
            <summary>
            Creates and caches fast property helpers that expose getters for every public get property on the
            specified type.
            </summary>
            <param name="type">the type to extract property accessors for.</param>
            <returns>a cached array of all public property getters from the type of target instance.
            </returns>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.PropertyHelper.MakeFastPropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property getter. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the getter for.</param>
            <returns>a fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.PropertyHelper.MakeFastPropertySetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property setter for reference types. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the setter for.</param>
            <returns>a fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed. This only works for reference types.
            </remarks>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.TaskHelper">
            <summary>
            Utility methods for dealing with <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.TaskHelper.WaitAndThrowIfFaulted(System.Threading.Tasks.Task)">
            <summary>
            Waits for the task to complete and throws the first faulting exception if the task is faulted. 
            It preserves the original stack trace when throwing the exception.
            </summary>
            <remarks>
            Invoking this method is equivalent to calling Wait() on the <paramref name="task" /> if it is not completed.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.TaskHelper.WaitAndThrowIfFaulted``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Waits for the task to complete and throws the first faulting exception if the task is faulted. 
            It preserves the original stack trace when throwing the exception.
            </summary>
            <remarks>
            Invoking this method is equivalent to calling <see cref="P:System.Threading.Tasks.Task`1.Result"/> on the 
            <paramref name="task"/> if it is not completed.
            </remarks>
        </member>
    </members>
</doc>
